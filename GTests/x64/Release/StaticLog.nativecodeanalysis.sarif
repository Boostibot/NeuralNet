{
  "version": "2.1.0",
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.4.json",
  "runs": [
    {
      "results": [
        {
          "ruleId": "C26408",
          "message": {
            "text": "Avoid malloc() and free(), prefer the nothrow version of new with delete (r.10)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/G_MemoryFunctions.h"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 12,
                  "endLine": 220,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'AllocateMemory' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/G_MemoryFunctions.h"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 28,
                  "endLine": 218,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26493",
          "message": {
            "text": "Don't use C-style casts (type.4)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 111,
                  "endLine": 55,
                  "endColumn": 117
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26493",
          "message": {
            "text": "Don't use C-style casts (type.4)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 136,
                  "endLine": 55,
                  "endColumn": 142
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26493",
          "message": {
            "text": "Don't use C-style casts (type.4)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 149,
                  "endLine": 55,
                  "endColumn": 155
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'LogWriterInterface::LogCustom' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 22,
                  "endLine": 55,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26493",
          "message": {
            "text": "Don't use C-style casts (type.4)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 99,
                  "endLine": 57,
                  "endColumn": 105
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26493",
          "message": {
            "text": "Don't use C-style casts (type.4)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 121,
                  "endLine": 57,
                  "endColumn": 127
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'LogWriterInterface::SetCustomLogState' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 22,
                  "endLine": 57,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'LogWriterInterface::IsOutputStreamOpen' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 22,
                  "endLine": 60,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26493",
          "message": {
            "text": "Don't use C-style casts (type.4)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 97,
                  "endLine": 62,
                  "endColumn": 103
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'LogWriterInterface::OpenOutputStream' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 22,
                  "endLine": 62,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'LogWriterInterface::CloseOutputStream' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 22,
                  "endLine": 64,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'LogWriterInterface::FlushOutputStream' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 22,
                  "endLine": 66,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26432",
          "message": {
            "text": "If you define or delete any default operation in the type 'class LogWriterInterface', define or delete them all (c.21)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 18,
                  "endLine": 67,
                  "endColumn": 18
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'DefaultPassiveLogWriter::LogMsg' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 22,
                  "endLine": 86,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'DefaultPassiveLogWriter::LogMsg' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 22,
                  "endLine": 86,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'DefaultPassiveLogWriter::LogVar' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 22,
                  "endLine": 87,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'DefaultPassiveLogWriter::LogVar' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 22,
                  "endLine": 87,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'DefaultPassiveLogWriter::LogMsgSource' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 22,
                  "endLine": 88,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'DefaultPassiveLogWriter::LogMsgSource' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 22,
                  "endLine": 88,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'DefaultPassiveLogWriter::LogVarSource' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 22,
                  "endLine": 89,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'DefaultPassiveLogWriter::LogVarSource' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 22,
                  "endLine": 89,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'DefaultPassiveLogWriter::LogByPartsStart' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 22,
                  "endLine": 91,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'DefaultPassiveLogWriter::LogByPartsStart' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 22,
                  "endLine": 91,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'DefaultPassiveLogWriter::LogByPartsLvl' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 22,
                  "endLine": 92,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'DefaultPassiveLogWriter::LogByPartsLvl' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 22,
                  "endLine": 92,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'DefaultPassiveLogWriter::LogByPartsSource' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 22,
                  "endLine": 93,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'DefaultPassiveLogWriter::LogByPartsSource' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 22,
                  "endLine": 93,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'DefaultPassiveLogWriter::LogByPartsMsg' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 22,
                  "endLine": 94,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'DefaultPassiveLogWriter::LogByPartsMsg' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 22,
                  "endLine": 94,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'DefaultPassiveLogWriter::LogByPartsVar' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 22,
                  "endLine": 95,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'DefaultPassiveLogWriter::LogByPartsVar' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 22,
                  "endLine": 95,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'DefaultPassiveLogWriter::LogByPartsFinish' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 22,
                  "endLine": 96,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'DefaultPassiveLogWriter::LogByPartsFinish' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 22,
                  "endLine": 96,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'DefaultPassiveLogWriter::IsPassiveLogger' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 22,
                  "endLine": 98,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'DefaultPassiveLogWriter::IsPassiveLogger' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 22,
                  "endLine": 98,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'DefaultPassiveLogWriter::IsOutputStreamOpen' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 22,
                  "endLine": 100,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'DefaultPassiveLogWriter::IsOutputStreamOpen' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 22,
                  "endLine": 100,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'DefaultPassiveLogWriter::OpenOutputStream' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 22,
                  "endLine": 101,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'DefaultPassiveLogWriter::OpenOutputStream' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 22,
                  "endLine": 101,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'DefaultPassiveLogWriter::CloseOutputStream' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 22,
                  "endLine": 102,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'DefaultPassiveLogWriter::CloseOutputStream' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 22,
                  "endLine": 102,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'DefaultPassiveLogWriter::FlushOutputStream' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 22,
                  "endLine": 103,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'DefaultPassiveLogWriter::FlushOutputStream' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 22,
                  "endLine": 103,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26443",
          "message": {
            "text": "Overriding destructor should not use explicit 'override' or 'virtual' specifiers (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 18,
                  "endLine": 104,
                  "endColumn": 18
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26432",
          "message": {
            "text": "If you define or delete any default operation in the type 'class DefaultPassiveLogWriter', define or delete them all (c.21)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 18,
                  "endLine": 104,
                  "endColumn": 18
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26455",
          "message": {
            "text": "Default constructor may not throw. Declare it 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 9,
                  "endLine": 166,
                  "endColumn": 9
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'DefaultOperativeLogWriter::LogMsg' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 22,
                  "endLine": 179,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'DefaultOperativeLogWriter::LogVar' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 22,
                  "endLine": 186,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'DefaultOperativeLogWriter::LogMsgSource' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 22,
                  "endLine": 193,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'DefaultOperativeLogWriter::LogVarSource' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 22,
                  "endLine": 202,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'DefaultOperativeLogWriter::LogByPartsStart' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 22,
                  "endLine": 212,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'DefaultOperativeLogWriter::LogByPartsSource' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 22,
                  "endLine": 217,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'DefaultOperativeLogWriter::LogByPartsLvl' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 22,
                  "endLine": 225,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'DefaultOperativeLogWriter::LogByPartsMsg' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 22,
                  "endLine": 233,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'DefaultOperativeLogWriter::LogByPartsVar' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 22,
                  "endLine": 240,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'DefaultOperativeLogWriter::LogByPartsFinish' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 22,
                  "endLine": 247,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26493",
          "message": {
            "text": "Don't use C-style casts (type.4)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 13,
                  "endLine": 295,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26493",
          "message": {
            "text": "Don't use C-style casts (type.4)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 38,
                  "endLine": 295,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26493",
          "message": {
            "text": "Don't use C-style casts (type.4)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 51,
                  "endLine": 295,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'DefaultOperativeLogWriter::LogCustom' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 22,
                  "endLine": 293,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'DefaultOperativeLogWriter::LogCustom' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 22,
                  "endLine": 293,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26493",
          "message": {
            "text": "Don't use C-style casts (type.4)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 298,
                  "startColumn": 102,
                  "endLine": 298,
                  "endColumn": 108
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26493",
          "message": {
            "text": "Don't use C-style casts (type.4)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 298,
                  "startColumn": 127,
                  "endLine": 298,
                  "endColumn": 133
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'DefaultOperativeLogWriter::SetCustomLogState' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 298,
                  "startColumn": 22,
                  "endLine": 298,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'DefaultOperativeLogWriter::SetCustomLogState' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 298,
                  "startColumn": 22,
                  "endLine": 298,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'DefaultOperativeLogWriter::IsPassiveLogger' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 22,
                  "endLine": 343,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'DefaultOperativeLogWriter::IsPassiveLogger' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 22,
                  "endLine": 343,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'DefaultOperativeLogWriter::IsOutputStreamOpen' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 344,
                  "startColumn": 22,
                  "endLine": 344,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'DefaultOperativeLogWriter::OpenOutputStream' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 348,
                  "startColumn": 22,
                  "endLine": 348,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'DefaultOperativeLogWriter::CloseOutputStream' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 22,
                  "endLine": 352,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'DefaultOperativeLogWriter::FlushOutputStream' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 356,
                  "startColumn": 22,
                  "endLine": 356,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26443",
          "message": {
            "text": "Overriding destructor should not use explicit 'override' or 'virtual' specifiers (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 18,
                  "endLine": 360,
                  "endColumn": 18
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26432",
          "message": {
            "text": "If you define or delete any default operation in the type 'class DefaultOperativeLogWriter', define or delete them all (c.21)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 18,
                  "endLine": 360,
                  "endColumn": 18
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26447",
          "message": {
            "text": "The function is declared 'noexcept' but calls function 'TearDown()' which may throw exceptions (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 47,
                  "endLine": 360,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26485",
          "message": {
            "text": "Expression 'str': No array to pointer decay (bounds.3)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 371,
                  "startColumn": 13,
                  "endLine": 371,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26485",
          "message": {
            "text": "Expression 'str': No array to pointer decay (bounds.3)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 373,
                  "startColumn": 13,
                  "endLine": 373,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'DefaultOperativeLogWriter::ResetString' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 435,
                  "startColumn": 21,
                  "endLine": 435,
                  "endColumn": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'DefaultOperativeLogWriter::IncrementEntryIndex' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogWriter.h"
                },
                "region": {
                  "startLine": 479,
                  "startColumn": 21,
                  "endLine": 479,
                  "endColumn": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26490",
          "message": {
            "text": "Don't use reinterpret_cast (type.1)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/LogDataInterpret.h"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 127,
                  "endLine": 81,
                  "endColumn": 164
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26455",
          "message": {
            "text": "Default constructor may not throw. Declare it 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 2,
                  "endLine": 7,
                  "endColumn": 2
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'operator new' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 2
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::Logger_CrtpOverloading_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::Logger_CrtpOverloading_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_CrtpOverloading_Test@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::TestFactoryImpl<StaticLogger::Logger_CrtpOverloading_Test>::TestFactoryImpl<StaticLogger::Logger_CrtpOverloading_Test>' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 2,
                  "endLine": 7,
                  "endColumn": 2
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::GetTestTypeId' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 2,
                  "endLine": 7,
                  "endColumn": 2
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 2
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::Logger_CrtpOverloading_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::Logger_CrtpOverloading_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_CrtpOverloading_Test@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::CodeLocation::CodeLocation' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 2,
                  "endLine": 7,
                  "endColumn": 2
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::MakeAndRegisterTestInfo' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 2,
                  "endLine": 7,
                  "endColumn": 2
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 2
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 3,
                  "endLine": 11,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 3,
                  "endLine": 12,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 3,
                  "endLine": 15,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 3,
                  "endLine": 16,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 3,
                  "endLine": 17,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 3,
                  "endLine": 18,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 3,
                  "endLine": 19,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'StaticLogger::Logger_CrtpOverloading_Test::TestBody' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 2,
                  "endLine": 7,
                  "endColumn": 2
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 3,
                  "endLine": 11,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 3,
                  "endLine": 12,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 3,
                  "endLine": 15,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 3,
                  "endLine": 16,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 3,
                  "endLine": 17,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 3,
                  "endLine": 18,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 3,
                  "endLine": 19,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26455",
          "message": {
            "text": "Default constructor may not throw. Declare it 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 3,
                  "endLine": 33,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'operator new' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerFunctionCalling::Logger_WriteMsgs_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerFunctionCalling::Logger_WriteMsgs_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_WriteMsgs_Test@LoggerFunctionCalling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_WriteMsgs_Test>::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_WriteMsgs_Test>' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 3,
                  "endLine": 33,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::GetTestTypeId' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 3,
                  "endLine": 33,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerFunctionCalling::Logger_WriteMsgs_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerFunctionCalling::Logger_WriteMsgs_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_WriteMsgs_Test@LoggerFunctionCalling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::CodeLocation::CodeLocation' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 3,
                  "endLine": 33,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::MakeAndRegisterTestInfo' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 3,
                  "endLine": 33,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'StaticLogger::LoggerFunctionCalling::Logger_WriteMsgs_Test::TestBody' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 3,
                  "endLine": 33,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26455",
          "message": {
            "text": "Default constructor may not throw. Declare it 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 3,
                  "endLine": 40,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'operator new' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerFunctionCalling::Logger_WriteVars_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerFunctionCalling::Logger_WriteVars_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_WriteVars_Test@LoggerFunctionCalling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_WriteVars_Test>::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_WriteVars_Test>' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 3,
                  "endLine": 40,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::GetTestTypeId' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 3,
                  "endLine": 40,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerFunctionCalling::Logger_WriteVars_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerFunctionCalling::Logger_WriteVars_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_WriteVars_Test@LoggerFunctionCalling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::CodeLocation::CodeLocation' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 3,
                  "endLine": 40,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::MakeAndRegisterTestInfo' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 3,
                  "endLine": 40,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 4,
                  "endLine": 45,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'StaticLogger::LoggerFunctionCalling::Logger_WriteVars_Test::TestBody' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 3,
                  "endLine": 40,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 4,
                  "endLine": 45,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26455",
          "message": {
            "text": "Default constructor may not throw. Declare it 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 3,
                  "endLine": 48,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'operator new' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerFunctionCalling::Logger_AppendSource_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerFunctionCalling::Logger_AppendSource_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_AppendSource_Test@LoggerFunctionCalling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_AppendSource_Test>::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_AppendSource_Test>' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 3,
                  "endLine": 48,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::GetTestTypeId' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 3,
                  "endLine": 48,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerFunctionCalling::Logger_AppendSource_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerFunctionCalling::Logger_AppendSource_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_AppendSource_Test@LoggerFunctionCalling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::CodeLocation::CodeLocation' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 3,
                  "endLine": 48,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::MakeAndRegisterTestInfo' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 3,
                  "endLine": 48,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 4,
                  "endLine": 56,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 4,
                  "endLine": 57,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 4,
                  "endLine": 58,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26496",
          "message": {
            "text": "The variable 'lineNum' is assigned only once, mark it as const (con.4)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 8,
                  "endLine": 53,
                  "endColumn": 18
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'StaticLogger::LoggerFunctionCalling::Logger_AppendSource_Test::TestBody' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 3,
                  "endLine": 48,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 4,
                  "endLine": 56,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 4,
                  "endLine": 57,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 4,
                  "endLine": 58,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26455",
          "message": {
            "text": "Default constructor may not throw. Declare it 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 3,
                  "endLine": 61,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'operator new' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerFunctionCalling::Logger_AppendTags_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerFunctionCalling::Logger_AppendTags_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_AppendTags_Test@LoggerFunctionCalling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_AppendTags_Test>::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_AppendTags_Test>' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 3,
                  "endLine": 61,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::GetTestTypeId' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 3,
                  "endLine": 61,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerFunctionCalling::Logger_AppendTags_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerFunctionCalling::Logger_AppendTags_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_AppendTags_Test@LoggerFunctionCalling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::CodeLocation::CodeLocation' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 3,
                  "endLine": 61,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::MakeAndRegisterTestInfo' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 3,
                  "endLine": 61,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 4,
                  "endLine": 66,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'StaticLogger::LoggerFunctionCalling::Logger_AppendTags_Test::TestBody' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 3,
                  "endLine": 61,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 4,
                  "endLine": 66,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26455",
          "message": {
            "text": "Default constructor may not throw. Declare it 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 3,
                  "endLine": 69,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'operator new' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerFunctionCalling::Logger_OpenStream_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerFunctionCalling::Logger_OpenStream_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_OpenStream_Test@LoggerFunctionCalling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_OpenStream_Test>::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_OpenStream_Test>' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 3,
                  "endLine": 69,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::GetTestTypeId' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 3,
                  "endLine": 69,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerFunctionCalling::Logger_OpenStream_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerFunctionCalling::Logger_OpenStream_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_OpenStream_Test@LoggerFunctionCalling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::CodeLocation::CodeLocation' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 3,
                  "endLine": 69,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::MakeAndRegisterTestInfo' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 3,
                  "endLine": 69,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 4,
                  "endLine": 73,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 4,
                  "endLine": 76,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'StaticLogger::LoggerFunctionCalling::Logger_OpenStream_Test::TestBody' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 3,
                  "endLine": 69,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 4,
                  "endLine": 73,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 4,
                  "endLine": 76,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26455",
          "message": {
            "text": "Default constructor may not throw. Declare it 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 3,
                  "endLine": 79,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'operator new' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerFunctionCalling::Logger_CloseStream_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerFunctionCalling::Logger_CloseStream_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_CloseStream_Test@LoggerFunctionCalling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_CloseStream_Test>::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_CloseStream_Test>' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 3,
                  "endLine": 79,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::GetTestTypeId' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 3,
                  "endLine": 79,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerFunctionCalling::Logger_CloseStream_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerFunctionCalling::Logger_CloseStream_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_CloseStream_Test@LoggerFunctionCalling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::CodeLocation::CodeLocation' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 3,
                  "endLine": 79,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::MakeAndRegisterTestInfo' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 3,
                  "endLine": 79,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 4,
                  "endLine": 83,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 4,
                  "endLine": 85,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 4,
                  "endLine": 86,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'StaticLogger::LoggerFunctionCalling::Logger_CloseStream_Test::TestBody' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 3,
                  "endLine": 79,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 4,
                  "endLine": 83,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 4,
                  "endLine": 85,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 4,
                  "endLine": 86,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26455",
          "message": {
            "text": "Default constructor may not throw. Declare it 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 3,
                  "endLine": 89,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'operator new' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerFunctionCalling::Logger_IsStreamOpen_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerFunctionCalling::Logger_IsStreamOpen_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_IsStreamOpen_Test@LoggerFunctionCalling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_IsStreamOpen_Test>::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_IsStreamOpen_Test>' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 3,
                  "endLine": 89,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::GetTestTypeId' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 3,
                  "endLine": 89,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerFunctionCalling::Logger_IsStreamOpen_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerFunctionCalling::Logger_IsStreamOpen_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_IsStreamOpen_Test@LoggerFunctionCalling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::CodeLocation::CodeLocation' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 3,
                  "endLine": 89,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::MakeAndRegisterTestInfo' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 3,
                  "endLine": 89,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 4,
                  "endLine": 94,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 4,
                  "endLine": 95,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 4,
                  "endLine": 98,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 4,
                  "endLine": 100,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'StaticLogger::LoggerFunctionCalling::Logger_IsStreamOpen_Test::TestBody' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 3,
                  "endLine": 89,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 4,
                  "endLine": 94,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 4,
                  "endLine": 95,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 4,
                  "endLine": 98,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 4,
                  "endLine": 100,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26455",
          "message": {
            "text": "Default constructor may not throw. Declare it 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 3,
                  "endLine": 103,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'operator new' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerFunctionCalling::Logger_FlushStream_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerFunctionCalling::Logger_FlushStream_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_FlushStream_Test@LoggerFunctionCalling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_FlushStream_Test>::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_FlushStream_Test>' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 3,
                  "endLine": 103,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::GetTestTypeId' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 3,
                  "endLine": 103,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerFunctionCalling::Logger_FlushStream_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerFunctionCalling::Logger_FlushStream_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_FlushStream_Test@LoggerFunctionCalling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::CodeLocation::CodeLocation' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 3,
                  "endLine": 103,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::MakeAndRegisterTestInfo' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 3,
                  "endLine": 103,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 4,
                  "endLine": 107,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'StaticLogger::LoggerFunctionCalling::Logger_FlushStream_Test::TestBody' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 3,
                  "endLine": 103,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 4,
                  "endLine": 107,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26455",
          "message": {
            "text": "Default constructor may not throw. Declare it 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 3,
                  "endLine": 110,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'operator new' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerFunctionCalling::Logger_OnConstruction_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerFunctionCalling::Logger_OnConstruction_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_OnConstruction_Test@LoggerFunctionCalling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_OnConstruction_Test>::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_OnConstruction_Test>' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 3,
                  "endLine": 110,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::GetTestTypeId' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 3,
                  "endLine": 110,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerFunctionCalling::Logger_OnConstruction_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerFunctionCalling::Logger_OnConstruction_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_OnConstruction_Test@LoggerFunctionCalling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::CodeLocation::CodeLocation' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 3,
                  "endLine": 110,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::MakeAndRegisterTestInfo' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 3,
                  "endLine": 110,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 4,
                  "endLine": 114,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'StaticLogger::LoggerFunctionCalling::Logger_OnConstruction_Test::TestBody' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 3,
                  "endLine": 110,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 4,
                  "endLine": 114,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26455",
          "message": {
            "text": "Default constructor may not throw. Declare it 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 3,
                  "endLine": 117,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'operator new' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerFunctionCalling::Logger_OnDestruction_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerFunctionCalling::Logger_OnDestruction_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_OnDestruction_Test@LoggerFunctionCalling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_OnDestruction_Test>::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_OnDestruction_Test>' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 3,
                  "endLine": 117,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::GetTestTypeId' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 3,
                  "endLine": 117,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerFunctionCalling::Logger_OnDestruction_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerFunctionCalling::Logger_OnDestruction_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_OnDestruction_Test@LoggerFunctionCalling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::CodeLocation::CodeLocation' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 3,
                  "endLine": 117,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::MakeAndRegisterTestInfo' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 3,
                  "endLine": 117,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 4,
                  "endLine": 126,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'StaticLogger::LoggerFunctionCalling::Logger_OnDestruction_Test::TestBody' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 3,
                  "endLine": 117,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 4,
                  "endLine": 126,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26455",
          "message": {
            "text": "Default constructor may not throw. Declare it 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 3,
                  "endLine": 134,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'operator new' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerLogEnabling::Logger_IsLevelInRange_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerLogEnabling::Logger_IsLevelInRange_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_IsLevelInRange_Test@LoggerLogEnabling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerLogEnabling::Logger_IsLevelInRange_Test>::TestFactoryImpl<StaticLogger::LoggerLogEnabling::Logger_IsLevelInRange_Test>' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 3,
                  "endLine": 134,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::GetTestTypeId' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 3,
                  "endLine": 134,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerLogEnabling::Logger_IsLevelInRange_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerLogEnabling::Logger_IsLevelInRange_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_IsLevelInRange_Test@LoggerLogEnabling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::CodeLocation::CodeLocation' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 3,
                  "endLine": 134,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::MakeAndRegisterTestInfo' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 3,
                  "endLine": 134,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 4,
                  "endLine": 137,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 4,
                  "endLine": 138,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 4,
                  "endLine": 139,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'StaticLogger::LoggerLogEnabling::Logger_IsLevelInRange_Test::TestBody' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 3,
                  "endLine": 134,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 4,
                  "endLine": 137,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 4,
                  "endLine": 138,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 4,
                  "endLine": 139,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26455",
          "message": {
            "text": "Default constructor may not throw. Declare it 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 3,
                  "endLine": 141,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'operator new' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerLogEnabling::Logger_IsLogEnabled_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerLogEnabling::Logger_IsLogEnabled_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_IsLogEnabled_Test@LoggerLogEnabling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerLogEnabling::Logger_IsLogEnabled_Test>::TestFactoryImpl<StaticLogger::LoggerLogEnabling::Logger_IsLogEnabled_Test>' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 3,
                  "endLine": 141,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::GetTestTypeId' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 3,
                  "endLine": 141,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerLogEnabling::Logger_IsLogEnabled_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerLogEnabling::Logger_IsLogEnabled_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_IsLogEnabled_Test@LoggerLogEnabling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::CodeLocation::CodeLocation' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 3,
                  "endLine": 141,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::MakeAndRegisterTestInfo' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 3,
                  "endLine": 141,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 4,
                  "endLine": 144,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 4,
                  "endLine": 146,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'StaticLogger::LoggerLogEnabling::Logger_IsLogEnabled_Test::TestBody' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 3,
                  "endLine": 141,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 4,
                  "endLine": 144,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 4,
                  "endLine": 146,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26455",
          "message": {
            "text": "Default constructor may not throw. Declare it 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 3,
                  "endLine": 148,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'operator new' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerLogEnabling::Logger_DoLog_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerLogEnabling::Logger_DoLog_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_DoLog_Test@LoggerLogEnabling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerLogEnabling::Logger_DoLog_Test>::TestFactoryImpl<StaticLogger::LoggerLogEnabling::Logger_DoLog_Test>' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 3,
                  "endLine": 148,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::GetTestTypeId' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 3,
                  "endLine": 148,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerLogEnabling::Logger_DoLog_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerLogEnabling::Logger_DoLog_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_DoLog_Test@LoggerLogEnabling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::CodeLocation::CodeLocation' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 3,
                  "endLine": 148,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::MakeAndRegisterTestInfo' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 3,
                  "endLine": 148,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 4,
                  "endLine": 151,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 4,
                  "endLine": 153,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 4,
                  "endLine": 155,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'StaticLogger::LoggerLogEnabling::Logger_DoLog_Test::TestBody' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 3,
                  "endLine": 148,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 4,
                  "endLine": 151,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 4,
                  "endLine": 153,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 4,
                  "endLine": 155,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26455",
          "message": {
            "text": "Default constructor may not throw. Declare it 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 3,
                  "endLine": 157,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'operator new' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerLogEnabling::Logger_EnableLog_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerLogEnabling::Logger_EnableLog_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_EnableLog_Test@LoggerLogEnabling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerLogEnabling::Logger_EnableLog_Test>::TestFactoryImpl<StaticLogger::LoggerLogEnabling::Logger_EnableLog_Test>' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 3,
                  "endLine": 157,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::GetTestTypeId' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 3,
                  "endLine": 157,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerLogEnabling::Logger_EnableLog_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerLogEnabling::Logger_EnableLog_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_EnableLog_Test@LoggerLogEnabling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::CodeLocation::CodeLocation' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 3,
                  "endLine": 157,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::MakeAndRegisterTestInfo' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 3,
                  "endLine": 157,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 4,
                  "endLine": 160,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 4,
                  "endLine": 162,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 4,
                  "endLine": 164,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 4,
                  "endLine": 166,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'StaticLogger::LoggerLogEnabling::Logger_EnableLog_Test::TestBody' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 3,
                  "endLine": 157,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 4,
                  "endLine": 160,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 4,
                  "endLine": 162,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 4,
                  "endLine": 164,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 4,
                  "endLine": 166,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26455",
          "message": {
            "text": "Default constructor may not throw. Declare it 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 3,
                  "endLine": 168,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'operator new' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerLogEnabling::Logger_DisableLog_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerLogEnabling::Logger_DisableLog_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_DisableLog_Test@LoggerLogEnabling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerLogEnabling::Logger_DisableLog_Test>::TestFactoryImpl<StaticLogger::LoggerLogEnabling::Logger_DisableLog_Test>' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 3,
                  "endLine": 168,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::GetTestTypeId' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 3,
                  "endLine": 168,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerLogEnabling::Logger_DisableLog_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerLogEnabling::Logger_DisableLog_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_DisableLog_Test@LoggerLogEnabling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::CodeLocation::CodeLocation' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 3,
                  "endLine": 168,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::MakeAndRegisterTestInfo' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 3,
                  "endLine": 168,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 4,
                  "endLine": 171,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 4,
                  "endLine": 173,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 4,
                  "endLine": 175,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'StaticLogger::LoggerLogEnabling::Logger_DisableLog_Test::TestBody' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 3,
                  "endLine": 168,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 4,
                  "endLine": 171,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 4,
                  "endLine": 173,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 4,
                  "endLine": 175,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26455",
          "message": {
            "text": "Default constructor may not throw. Declare it 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 3,
                  "endLine": 178,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'operator new' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test>::TestFactoryImpl<StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test>' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 3,
                  "endLine": 178,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::GetTestTypeId' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 3,
                  "endLine": 178,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::CodeLocation::CodeLocation' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 3,
                  "endLine": 178,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::MakeAndRegisterTestInfo' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 3,
                  "endLine": 178,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 5,
                  "endLine": 184,
                  "endColumn": 5
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 5,
                  "endLine": 189,
                  "endColumn": 5
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 5,
                  "endLine": 194,
                  "endColumn": 5
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 4,
                  "endLine": 200,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 4,
                  "endLine": 201,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 4,
                  "endLine": 202,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 4,
                  "endLine": 205,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 4,
                  "endLine": 206,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 4,
                  "endLine": 207,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 4,
                  "endLine": 211,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 4,
                  "endLine": 212,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 4,
                  "endLine": 213,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 4,
                  "endLine": 218,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 4,
                  "endLine": 219,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 4,
                  "endLine": 220,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 4,
                  "endLine": 223,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 4,
                  "endLine": 225,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 4,
                  "endLine": 226,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 4,
                  "endLine": 227,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 3,
                  "endLine": 178,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 5,
                  "endLine": 184,
                  "endColumn": 5
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 5,
                  "endLine": 189,
                  "endColumn": 5
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 5,
                  "endLine": 194,
                  "endColumn": 5
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 4,
                  "endLine": 200,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 4,
                  "endLine": 201,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 4,
                  "endLine": 202,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 4,
                  "endLine": 205,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 4,
                  "endLine": 206,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 4,
                  "endLine": 207,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 4,
                  "endLine": 211,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 4,
                  "endLine": 212,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 4,
                  "endLine": 213,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 4,
                  "endLine": 218,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 4,
                  "endLine": 219,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 4,
                  "endLine": 220,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 4,
                  "endLine": 223,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 4,
                  "endLine": 225,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 4,
                  "endLine": 226,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 4,
                  "endLine": 227,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26455",
          "message": {
            "text": "Default constructor may not throw. Declare it 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 3,
                  "endLine": 229,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'operator new' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test>::TestFactoryImpl<StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test>' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 3,
                  "endLine": 229,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::GetTestTypeId' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 3,
                  "endLine": 229,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 3
                }
              },
              "logicalLocations": [
                {
                  "name": "`dynamic initializer for 'StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::test_info_''",
                  "fullyQualifiedName": "void __cdecl `dynamic initializer for 'private: static class testing::TestInfo * StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::test_info_''(void)",
                  "decoratedName": "??__E?test_info_@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::CodeLocation::CodeLocation' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 3,
                  "endLine": 229,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26426",
          "message": {
            "text": "Global initializer calls a non-constexpr function 'testing::internal::MakeAndRegisterTestInfo' (i.22)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 3,
                  "endLine": 229,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 4,
                  "endLine": 234,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 4,
                  "endLine": 235,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 4,
                  "endLine": 236,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 4,
                  "endLine": 237,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 4,
                  "endLine": 238,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 4,
                  "endLine": 240,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 4,
                  "endLine": 244,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 4,
                  "endLine": 245,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 4,
                  "endLine": 246,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 4,
                  "endLine": 247,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 4,
                  "endLine": 248,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 4,
                  "endLine": 250,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 4,
                  "endLine": 254,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 4,
                  "endLine": 255,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 4,
                  "endLine": 256,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 4,
                  "endLine": 257,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 4,
                  "endLine": 258,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 4,
                  "endLine": 260,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 4,
                  "endLine": 266,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 4,
                  "endLine": 267,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 4,
                  "endLine": 268,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 4,
                  "endLine": 271,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 4,
                  "endLine": 272,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 4,
                  "endLine": 273,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 4,
                  "endLine": 277,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 4,
                  "endLine": 278,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 4,
                  "endLine": 279,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 4,
                  "endLine": 285,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 286,
                  "startColumn": 4,
                  "endLine": 286,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C6326",
          "message": {
            "text": "Potential comparison of a constant with another constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 287,
                  "startColumn": 4,
                  "endLine": 287,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 3,
                  "endLine": 229,
                  "endColumn": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 4,
                  "endLine": 234,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 4,
                  "endLine": 235,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 4,
                  "endLine": 236,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 4,
                  "endLine": 237,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 4,
                  "endLine": 238,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 4,
                  "endLine": 240,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 4,
                  "endLine": 244,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 4,
                  "endLine": 245,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 4,
                  "endLine": 246,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 4,
                  "endLine": 247,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 4,
                  "endLine": 248,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 4,
                  "endLine": 250,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 4,
                  "endLine": 254,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 4,
                  "endLine": 255,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 4,
                  "endLine": 256,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 4,
                  "endLine": 257,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 4,
                  "endLine": 258,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 4,
                  "endLine": 260,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 4,
                  "endLine": 266,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 4,
                  "endLine": 267,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 4,
                  "endLine": 268,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 4,
                  "endLine": 271,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 4,
                  "endLine": 272,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 4,
                  "endLine": 273,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 4,
                  "endLine": 277,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 4,
                  "endLine": 278,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 4,
                  "endLine": 279,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 4,
                  "endLine": 285,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 286,
                  "startColumn": 4,
                  "endLine": 286,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26818",
          "message": {
            "text": "Switch statement does not cover all cases. Consider adding a 'default' label (es.79)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/StaticLog.cpp"
                },
                "region": {
                  "startLine": 287,
                  "startColumn": 4,
                  "endLine": 287,
                  "endColumn": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 39
                }
              },
              "logicalLocations": [
                {
                  "name": "testing::internal::TestFactoryImpl<StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test>::CreateTest",
                  "fullyQualifiedName": "public: virtual class testing::Test * __cdecl testing::internal::TestFactoryImpl<class StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test>::CreateTest(void)",
                  "decoratedName": "?CreateTest@?$TestFactoryImpl@VLogger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@@internal@testing@@UEAAPEAVTest@3@XZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test>::CreateTest' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 17,
                  "endLine": 472,
                  "endColumn": 17
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 39
                }
              },
              "logicalLocations": [
                {
                  "name": "testing::internal::TestFactoryImpl<StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test>::CreateTest",
                  "fullyQualifiedName": "public: virtual class testing::Test * __cdecl testing::internal::TestFactoryImpl<class StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test>::CreateTest(void)",
                  "decoratedName": "?CreateTest@?$TestFactoryImpl@VLogger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@@internal@testing@@UEAAPEAVTest@3@XZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test>::CreateTest' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 17,
                  "endLine": 472,
                  "endColumn": 17
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 39
                }
              },
              "logicalLocations": [
                {
                  "name": "testing::internal::TestFactoryImpl<StaticLogger::LoggerLogEnabling::Logger_DisableLog_Test>::CreateTest",
                  "fullyQualifiedName": "public: virtual class testing::Test * __cdecl testing::internal::TestFactoryImpl<class StaticLogger::LoggerLogEnabling::Logger_DisableLog_Test>::CreateTest(void)",
                  "decoratedName": "?CreateTest@?$TestFactoryImpl@VLogger_DisableLog_Test@LoggerLogEnabling@StaticLogger@@@internal@testing@@UEAAPEAVTest@3@XZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerLogEnabling::Logger_DisableLog_Test>::CreateTest' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 17,
                  "endLine": 472,
                  "endColumn": 17
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 39
                }
              },
              "logicalLocations": [
                {
                  "name": "testing::internal::TestFactoryImpl<StaticLogger::LoggerLogEnabling::Logger_EnableLog_Test>::CreateTest",
                  "fullyQualifiedName": "public: virtual class testing::Test * __cdecl testing::internal::TestFactoryImpl<class StaticLogger::LoggerLogEnabling::Logger_EnableLog_Test>::CreateTest(void)",
                  "decoratedName": "?CreateTest@?$TestFactoryImpl@VLogger_EnableLog_Test@LoggerLogEnabling@StaticLogger@@@internal@testing@@UEAAPEAVTest@3@XZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerLogEnabling::Logger_EnableLog_Test>::CreateTest' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 17,
                  "endLine": 472,
                  "endColumn": 17
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 39
                }
              },
              "logicalLocations": [
                {
                  "name": "testing::internal::TestFactoryImpl<StaticLogger::LoggerLogEnabling::Logger_DoLog_Test>::CreateTest",
                  "fullyQualifiedName": "public: virtual class testing::Test * __cdecl testing::internal::TestFactoryImpl<class StaticLogger::LoggerLogEnabling::Logger_DoLog_Test>::CreateTest(void)",
                  "decoratedName": "?CreateTest@?$TestFactoryImpl@VLogger_DoLog_Test@LoggerLogEnabling@StaticLogger@@@internal@testing@@UEAAPEAVTest@3@XZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerLogEnabling::Logger_DoLog_Test>::CreateTest' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 17,
                  "endLine": 472,
                  "endColumn": 17
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 39
                }
              },
              "logicalLocations": [
                {
                  "name": "testing::internal::TestFactoryImpl<StaticLogger::LoggerLogEnabling::Logger_IsLogEnabled_Test>::CreateTest",
                  "fullyQualifiedName": "public: virtual class testing::Test * __cdecl testing::internal::TestFactoryImpl<class StaticLogger::LoggerLogEnabling::Logger_IsLogEnabled_Test>::CreateTest(void)",
                  "decoratedName": "?CreateTest@?$TestFactoryImpl@VLogger_IsLogEnabled_Test@LoggerLogEnabling@StaticLogger@@@internal@testing@@UEAAPEAVTest@3@XZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerLogEnabling::Logger_IsLogEnabled_Test>::CreateTest' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 17,
                  "endLine": 472,
                  "endColumn": 17
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 39
                }
              },
              "logicalLocations": [
                {
                  "name": "testing::internal::TestFactoryImpl<StaticLogger::LoggerLogEnabling::Logger_IsLevelInRange_Test>::CreateTest",
                  "fullyQualifiedName": "public: virtual class testing::Test * __cdecl testing::internal::TestFactoryImpl<class StaticLogger::LoggerLogEnabling::Logger_IsLevelInRange_Test>::CreateTest(void)",
                  "decoratedName": "?CreateTest@?$TestFactoryImpl@VLogger_IsLevelInRange_Test@LoggerLogEnabling@StaticLogger@@@internal@testing@@UEAAPEAVTest@3@XZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerLogEnabling::Logger_IsLevelInRange_Test>::CreateTest' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 17,
                  "endLine": 472,
                  "endColumn": 17
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 39
                }
              },
              "logicalLocations": [
                {
                  "name": "testing::internal::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_OnDestruction_Test>::CreateTest",
                  "fullyQualifiedName": "public: virtual class testing::Test * __cdecl testing::internal::TestFactoryImpl<class StaticLogger::LoggerFunctionCalling::Logger_OnDestruction_Test>::CreateTest(void)",
                  "decoratedName": "?CreateTest@?$TestFactoryImpl@VLogger_OnDestruction_Test@LoggerFunctionCalling@StaticLogger@@@internal@testing@@UEAAPEAVTest@3@XZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_OnDestruction_Test>::CreateTest' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 17,
                  "endLine": 472,
                  "endColumn": 17
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 39
                }
              },
              "logicalLocations": [
                {
                  "name": "testing::internal::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_OnConstruction_Test>::CreateTest",
                  "fullyQualifiedName": "public: virtual class testing::Test * __cdecl testing::internal::TestFactoryImpl<class StaticLogger::LoggerFunctionCalling::Logger_OnConstruction_Test>::CreateTest(void)",
                  "decoratedName": "?CreateTest@?$TestFactoryImpl@VLogger_OnConstruction_Test@LoggerFunctionCalling@StaticLogger@@@internal@testing@@UEAAPEAVTest@3@XZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_OnConstruction_Test>::CreateTest' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 17,
                  "endLine": 472,
                  "endColumn": 17
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 39
                }
              },
              "logicalLocations": [
                {
                  "name": "testing::internal::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_FlushStream_Test>::CreateTest",
                  "fullyQualifiedName": "public: virtual class testing::Test * __cdecl testing::internal::TestFactoryImpl<class StaticLogger::LoggerFunctionCalling::Logger_FlushStream_Test>::CreateTest(void)",
                  "decoratedName": "?CreateTest@?$TestFactoryImpl@VLogger_FlushStream_Test@LoggerFunctionCalling@StaticLogger@@@internal@testing@@UEAAPEAVTest@3@XZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_FlushStream_Test>::CreateTest' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 17,
                  "endLine": 472,
                  "endColumn": 17
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 39
                }
              },
              "logicalLocations": [
                {
                  "name": "testing::internal::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_IsStreamOpen_Test>::CreateTest",
                  "fullyQualifiedName": "public: virtual class testing::Test * __cdecl testing::internal::TestFactoryImpl<class StaticLogger::LoggerFunctionCalling::Logger_IsStreamOpen_Test>::CreateTest(void)",
                  "decoratedName": "?CreateTest@?$TestFactoryImpl@VLogger_IsStreamOpen_Test@LoggerFunctionCalling@StaticLogger@@@internal@testing@@UEAAPEAVTest@3@XZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_IsStreamOpen_Test>::CreateTest' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 17,
                  "endLine": 472,
                  "endColumn": 17
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 39
                }
              },
              "logicalLocations": [
                {
                  "name": "testing::internal::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_CloseStream_Test>::CreateTest",
                  "fullyQualifiedName": "public: virtual class testing::Test * __cdecl testing::internal::TestFactoryImpl<class StaticLogger::LoggerFunctionCalling::Logger_CloseStream_Test>::CreateTest(void)",
                  "decoratedName": "?CreateTest@?$TestFactoryImpl@VLogger_CloseStream_Test@LoggerFunctionCalling@StaticLogger@@@internal@testing@@UEAAPEAVTest@3@XZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_CloseStream_Test>::CreateTest' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 17,
                  "endLine": 472,
                  "endColumn": 17
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 39
                }
              },
              "logicalLocations": [
                {
                  "name": "testing::internal::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_OpenStream_Test>::CreateTest",
                  "fullyQualifiedName": "public: virtual class testing::Test * __cdecl testing::internal::TestFactoryImpl<class StaticLogger::LoggerFunctionCalling::Logger_OpenStream_Test>::CreateTest(void)",
                  "decoratedName": "?CreateTest@?$TestFactoryImpl@VLogger_OpenStream_Test@LoggerFunctionCalling@StaticLogger@@@internal@testing@@UEAAPEAVTest@3@XZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_OpenStream_Test>::CreateTest' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 17,
                  "endLine": 472,
                  "endColumn": 17
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 39
                }
              },
              "logicalLocations": [
                {
                  "name": "testing::internal::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_AppendTags_Test>::CreateTest",
                  "fullyQualifiedName": "public: virtual class testing::Test * __cdecl testing::internal::TestFactoryImpl<class StaticLogger::LoggerFunctionCalling::Logger_AppendTags_Test>::CreateTest(void)",
                  "decoratedName": "?CreateTest@?$TestFactoryImpl@VLogger_AppendTags_Test@LoggerFunctionCalling@StaticLogger@@@internal@testing@@UEAAPEAVTest@3@XZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_AppendTags_Test>::CreateTest' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 17,
                  "endLine": 472,
                  "endColumn": 17
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 39
                }
              },
              "logicalLocations": [
                {
                  "name": "testing::internal::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_AppendSource_Test>::CreateTest",
                  "fullyQualifiedName": "public: virtual class testing::Test * __cdecl testing::internal::TestFactoryImpl<class StaticLogger::LoggerFunctionCalling::Logger_AppendSource_Test>::CreateTest(void)",
                  "decoratedName": "?CreateTest@?$TestFactoryImpl@VLogger_AppendSource_Test@LoggerFunctionCalling@StaticLogger@@@internal@testing@@UEAAPEAVTest@3@XZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_AppendSource_Test>::CreateTest' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 17,
                  "endLine": 472,
                  "endColumn": 17
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 39
                }
              },
              "logicalLocations": [
                {
                  "name": "testing::internal::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_WriteVars_Test>::CreateTest",
                  "fullyQualifiedName": "public: virtual class testing::Test * __cdecl testing::internal::TestFactoryImpl<class StaticLogger::LoggerFunctionCalling::Logger_WriteVars_Test>::CreateTest(void)",
                  "decoratedName": "?CreateTest@?$TestFactoryImpl@VLogger_WriteVars_Test@LoggerFunctionCalling@StaticLogger@@@internal@testing@@UEAAPEAVTest@3@XZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_WriteVars_Test>::CreateTest' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 17,
                  "endLine": 472,
                  "endColumn": 17
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 39
                }
              },
              "logicalLocations": [
                {
                  "name": "testing::internal::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_WriteMsgs_Test>::CreateTest",
                  "fullyQualifiedName": "public: virtual class testing::Test * __cdecl testing::internal::TestFactoryImpl<class StaticLogger::LoggerFunctionCalling::Logger_WriteMsgs_Test>::CreateTest(void)",
                  "decoratedName": "?CreateTest@?$TestFactoryImpl@VLogger_WriteMsgs_Test@LoggerFunctionCalling@StaticLogger@@@internal@testing@@UEAAPEAVTest@3@XZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'testing::internal::TestFactoryImpl<StaticLogger::LoggerFunctionCalling::Logger_WriteMsgs_Test>::CreateTest' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 17,
                  "endLine": 472,
                  "endColumn": 17
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 39
                }
              },
              "logicalLocations": [
                {
                  "name": "testing::internal::TestFactoryImpl<StaticLogger::Logger_CrtpOverloading_Test>::CreateTest",
                  "fullyQualifiedName": "public: virtual class testing::Test * __cdecl testing::internal::TestFactoryImpl<class StaticLogger::Logger_CrtpOverloading_Test>::CreateTest(void)",
                  "decoratedName": "?CreateTest@?$TestFactoryImpl@VLogger_CrtpOverloading_Test@StaticLogger@@@internal@testing@@UEAAPEAVTest@3@XZ",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26433",
          "message": {
            "text": "Function 'testing::internal::TestFactoryImpl<StaticLogger::Logger_CrtpOverloading_Test>::CreateTest' should be marked with 'override' (c.128)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 17,
                  "endLine": 472,
                  "endColumn": 17
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26432",
          "message": {
            "text": "If you define or delete any default operation in the type 'class StaticLogger::Logger<struct StaticLogger::StaticLogTesting::TestingLogger2,struct StaticLogger::StaticLogTesting::TestingDataPackage2>', define or delete them all (c.21)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/StaticLog.h"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 14,
                  "endLine": 112,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26447",
          "message": {
            "text": "The function is declared 'noexcept' but calls function 'GetWriter()' which may throw exceptions (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/StaticLog.h"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 17,
                  "endLine": 114,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26447",
          "message": {
            "text": "The function is declared 'noexcept' but calls function 'OnDestruction()' which may throw exceptions (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/StaticLog.h"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 17,
                  "endLine": 114,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26455",
          "message": {
            "text": "Default constructor may not throw. Declare it 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/StaticLog.h"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 13,
                  "endLine": 107,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'StaticLogger::Logger<StaticLogger::StaticLogTesting::TestingLogger1,StaticLogger::StaticLogTesting::TestingDataPackage1>::IsLogEnabled' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/StaticLog.h"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 25,
                  "endLine": 222,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'StaticLogger::Logger<StaticLogger::StaticLogTesting::TestingLogger1,StaticLogger::StaticLogTesting::TestingDataPackage1>::DoLog' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/StaticLog.h"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 25,
                  "endLine": 184,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26432",
          "message": {
            "text": "If you define or delete any default operation in the type 'class StaticLogger::Logger<struct StaticLogger::StaticLogTesting::TestingLogger1,struct StaticLogger::StaticLogTesting::TestingDataPackage1>', define or delete them all (c.21)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/StaticLog.h"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 14,
                  "endLine": 112,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26447",
          "message": {
            "text": "The function is declared 'noexcept' but calls function 'GetWriter()' which may throw exceptions (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/StaticLog.h"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 17,
                  "endLine": 114,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26447",
          "message": {
            "text": "The function is declared 'noexcept' but calls function 'OnDestruction()' which may throw exceptions (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/StaticLog.h"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 17,
                  "endLine": 114,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26455",
          "message": {
            "text": "Default constructor may not throw. Declare it 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/StaticLog.h"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 13,
                  "endLine": 107,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'StaticLogger::Logger<StaticLogger::StaticLogTesting::TestingLogger2,StaticLogger::StaticLogTesting::TestingDataPackage2>::GetWriter' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/StaticLog.h"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 25,
                  "endLine": 104,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26482",
          "message": {
            "text": "Only index into arrays using constant expressions (bounds.2)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/StaticLog.h"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 21,
                  "endLine": 255,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26446",
          "message": {
            "text": "Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/StaticLog.h"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 28,
                  "endLine": 255,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'StaticLogger::Logger<StaticLogger::StaticLogTesting::TestingLogger1,StaticLogger::StaticLogTesting::TestingDataPackage1>::GetWriter' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/StaticLog.h"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 25,
                  "endLine": 104,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26493",
          "message": {
            "text": "Don't use C-style casts (type.4)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/StaticLog.h"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 17,
                  "endLine": 235,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26493",
          "message": {
            "text": "Don't use C-style casts (type.4)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/StaticLog.h"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 17,
                  "endLine": 235,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26493",
          "message": {
            "text": "Don't use C-style casts (type.4)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/StaticLog.h"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 17,
                  "endLine": 235,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26493",
          "message": {
            "text": "Don't use C-style casts (type.4)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/StaticLog.h"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 17,
                  "endLine": 235,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26493",
          "message": {
            "text": "Don't use C-style casts (type.4)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/StaticLog.h"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 17,
                  "endLine": 235,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26493",
          "message": {
            "text": "Don't use C-style casts (type.4)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/StaticLog.h"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 17,
                  "endLine": 235,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26493",
          "message": {
            "text": "Don't use C-style casts (type.4)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/StaticLog.h"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 17,
                  "endLine": 202,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26493",
          "message": {
            "text": "Don't use C-style casts (type.4)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/StaticLog.h"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 17,
                  "endLine": 202,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26473",
          "message": {
            "text": "Don't cast between pointer types where the source type and the target type are the same (type.1)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/G_MemoryFunctions.h"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 12,
                  "endLine": 15,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'SetMemory<void * __ptr64,0>' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/G_MemoryFunctions.h"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 1,
                  "endLine": 13,
                  "endColumn": 1
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26482",
          "message": {
            "text": "Only index into arrays using constant expressions (bounds.2)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/StaticLog.h"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 17,
                  "endLine": 262,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26446",
          "message": {
            "text": "Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/StaticLog.h"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 17,
                  "endLine": 262,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'StaticLogger::Logger<StaticLogger::StaticLogTesting::TestingLogger1,StaticLogger::StaticLogTesting::TestingDataPackage1>::DoLoggingLevelInternal' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/StaticLog.h"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 25,
                  "endLine": 260,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'StaticLogger::Logger<StaticLogger::StaticLogTesting::TestingLogger1,StaticLogger::StaticLogTesting::TestingDataPackage1>::UnravelAndCheckLevel_Throw' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/StaticLog.h"
                },
                "region": {
                  "startLine": 299,
                  "startColumn": 25,
                  "endLine": 299,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'StaticLogger::Logger<StaticLogger::StaticLogTesting::TestingLogger1,StaticLogger::StaticLogTesting::TestingDataPackage1>::UnravelAndSetLoggingLevel' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/StaticLog.h"
                },
                "region": {
                  "startLine": 281,
                  "startColumn": 25,
                  "endLine": 281,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26440",
          "message": {
            "text": "Function 'StaticLogger::Logger<StaticLogger::StaticLogTesting::TestingLogger1,StaticLogger::StaticLogTesting::TestingDataPackage1>::UnravelAndSetLoggingLevel<1>' can be declared 'noexcept' (f.6)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GClasses/Common/StaticLog.h"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 1,
                  "endLine": 273,
                  "endColumn": 1
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26429",
          "message": {
            "text": "Symbol 'os' is never tested for nullness, it can be marked as not_null (f.23)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/gtest-printers.h"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 1,
                  "endLine": 260,
                  "endColumn": 1
                }
              }
            }
          ]
        },
        {
          "ruleId": "C26429",
          "message": {
            "text": "Symbol 'os' is never tested for nullness, it can be marked as not_null (f.23)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///G:/Work/Neural Net/NeuralNet/GTests/packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/gtest-printers.h"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 1,
                  "endLine": 260,
                  "endColumn": 1
                }
              }
            }
          ]
        }
      ],
      "tool": {
        "driver": {
          "name": "PREfast",
          "fullName": "PREfast Code Analysis",
          "version": "14.27.29111.0"
        }
      },
      "invocations": [
        {
          "commandLine": "\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.27.29110\\bin\\HostX86\\x64\\c1xx.dll\" -ACf{1F7B090C-16DB-4822-966A-A93D26ED4681} -ACpmspft140.dll -Alint -D_PREFAST_ -D_AST_FE_ -Analyze -zm0x008D7180 -allChunksReserved -il C:\\Users\\CHRIST~1\\AppData\\Local\\Temp\\_CL_60d8e734ast -typedil -f StaticLog.cpp -Ze -D_MSC_EXTENSIONS -Zp16 -pc \\:/ -D_MSC_VER=1927 -D_MSC_FULL_VER=192729111 -D_MSC_BUILD=0 -D_M_AMD64=100 -ZILP448 -D_M_X64=100 -D_WIN64 -D_WIN32 -GR -D_CPPRTTI -I G:\\Work\\Neural Net\\NeuralNet\\GTests\\packages\\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\\build\\native\\include -nologo -W 3 -diagnostics:column -GF -Og -Oi -Ot -Oy -DX64 -DNDEBUG -D_CONSOLE -DCODE_ANALYSIS -D_UNICODE -DUNICODE -EHs -D_CPPUNWIND -EHc -MT -clrNoPureCRT -D_MT -GS -D_M_FP_PRECISE -Zc:wchar_t -Zc:forScope -std:c++17 -Yupch.h -Fpx64\\Release\\GTests.pch -Fox64\\Release\\StaticLog.obj -Fdx64\\Release\\vc142.pdb -Gd -analyze:projectdirectory G:\\Work\\Neural Net\\NeuralNet\\GTests\\ -analyze:rulesetdirectory ;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Team Tools\\Static Analysis Tools\\\\Rule Sets; -analyze:ruleset C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Team Tools\\Static Analysis Tools\\Rule Sets\\AllRules.ruleset -analyze:quiet -analyze:plugin C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.27.29110\\bin\\HostX86\\x86\\EspXEngine.dll -FC -errorreport:prompt -I C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.27.29110\\include -I C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.27.29110\\atlmfc\\include -I C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Auxiliary\\VS\\include -I C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.19041.0\\ucrt -I C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.19041.0\\um -I C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.19041.0\\shared -I C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.19041.0\\winrt -I C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.19041.0\\cppwinrt -I C:\\Program Files (x86)\\Windows Kits\\NETFXSDK\\4.8\\Include\\um",
          "executionSuccessful": true,
          "ruleConfigurationOverrides": []
        }
      ],
      "artifacts": [
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gtests/staticlog.cpp"
          },
          "roles": [
            "analysisTarget",
            "resultFile"
          ]
        },
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gtests/pch.h"
          },
          "roles": [
            "resultFile"
          ]
        },
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gtests/packages/microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-death-test-internal.h"
          },
          "roles": [
            "resultFile"
          ]
        },
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gtests/packages/microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/custom/gtest-port.h"
          },
          "roles": [
            "resultFile"
          ]
        },
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gtests/packages/microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/gtest.h"
          },
          "roles": [
            "resultFile"
          ]
        },
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gtests/packages/microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-internal.h"
          },
          "roles": [
            "resultFile"
          ]
        },
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gtests/packages/microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-port.h"
          },
          "roles": [
            "resultFile"
          ]
        },
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gtests/packages/microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-param-util-generated.h"
          },
          "roles": [
            "resultFile"
          ]
        },
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gtests/packages/microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-port-arch.h"
          },
          "roles": [
            "resultFile"
          ]
        },
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gtests/packages/microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/gtest-message.h"
          },
          "roles": [
            "resultFile"
          ]
        },
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gtests/packages/microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-filepath.h"
          },
          "roles": [
            "resultFile"
          ]
        },
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gclasses/common/g_generalfunctions.h"
          },
          "roles": [
            "resultFile"
          ]
        },
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gtests/packages/microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/gtest-printers.h"
          },
          "roles": [
            "resultFile"
          ]
        },
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gtests/packages/microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-string.h"
          },
          "roles": [
            "resultFile"
          ]
        },
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gclasses/common/logdatainterpret.h"
          },
          "roles": [
            "resultFile"
          ]
        },
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gclasses/common/g_pointer.h"
          },
          "roles": [
            "resultFile"
          ]
        },
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gtests/packages/microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-type-util.h"
          },
          "roles": [
            "resultFile"
          ]
        },
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gtests/packages/microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/gtest-death-test.h"
          },
          "roles": [
            "resultFile"
          ]
        },
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gclasses/common/g_defines.h"
          },
          "roles": [
            "resultFile"
          ]
        },
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gtests/packages/microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/gtest-test-part.h"
          },
          "roles": [
            "resultFile"
          ]
        },
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gtests/packages/microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/gtest-param-test.h"
          },
          "roles": [
            "resultFile"
          ]
        },
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gtests/packages/microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-param-util.h"
          },
          "roles": [
            "resultFile"
          ]
        },
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gclasses/common/logdefines.h"
          },
          "roles": [
            "resultFile"
          ]
        },
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gtests/packages/microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/gtest-linked_ptr.h"
          },
          "roles": [
            "resultFile"
          ]
        },
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gclasses/common/logwriter.h"
          },
          "roles": [
            "resultFile"
          ]
        },
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gtests/packages/microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/internal/custom/gtest-printers.h"
          },
          "roles": [
            "resultFile"
          ]
        },
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gtests/packages/microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/gtest_prod.h"
          },
          "roles": [
            "resultFile"
          ]
        },
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gtests/packages/microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/gtest-typed-test.h"
          },
          "roles": [
            "resultFile"
          ]
        },
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gtests/packages/microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3/build/native/include/gtest/gtest_pred_impl.h"
          },
          "roles": [
            "resultFile"
          ]
        },
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gclasses/common/staticlog.h"
          },
          "roles": [
            "resultFile"
          ]
        },
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gclasses/common/g_common.h"
          },
          "roles": [
            "resultFile"
          ]
        },
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gclasses/common/g_standarttypedefs.h"
          },
          "roles": [
            "resultFile"
          ]
        },
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gclasses/common/g_memoryfunctions.h"
          },
          "roles": [
            "resultFile"
          ]
        },
        {
          "location": {
            "uri": "file:///g:/work/neural net/neuralnet/gclasses/common/log.h"
          },
          "roles": [
            "resultFile"
          ]
        }
      ]
    }
  ]
}