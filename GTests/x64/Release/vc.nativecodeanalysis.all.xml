<?xml version="1.0" encoding="utf-8"?><DEFECTS><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>55</LINE>
      <COLUMN>110</COLUMN>
    </SFA>
    <DEFECTCODE>26493</DEFECTCODE>
    <DESCRIPTION>Don't use C-style casts (type.4).</DESCRIPTION>
    <FUNCTION>LogWriterInterface::LogCustom</FUNCTION>
    <DECORATED>?LogCustom@LogWriterInterface@@UEAAXHIPEAX@Z</DECORATED>
    <FUNCLINE>55</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>55</LINE>
      <COLUMN>135</COLUMN>
    </SFA>
    <DEFECTCODE>26493</DEFECTCODE>
    <DESCRIPTION>Don't use C-style casts (type.4).</DESCRIPTION>
    <FUNCTION>LogWriterInterface::LogCustom</FUNCTION>
    <DECORATED>?LogCustom@LogWriterInterface@@UEAAXHIPEAX@Z</DECORATED>
    <FUNCLINE>55</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>55</LINE>
      <COLUMN>148</COLUMN>
    </SFA>
    <DEFECTCODE>26493</DEFECTCODE>
    <DESCRIPTION>Don't use C-style casts (type.4).</DESCRIPTION>
    <FUNCTION>LogWriterInterface::LogCustom</FUNCTION>
    <DECORATED>?LogCustom@LogWriterInterface@@UEAAXHIPEAX@Z</DECORATED>
    <FUNCLINE>55</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>55</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'LogWriterInterface::LogCustom' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>LogWriterInterface::LogCustom</FUNCTION>
    <DECORATED>?LogCustom@LogWriterInterface@@UEAAXHIPEAX@Z</DECORATED>
    <FUNCLINE>55</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>57</LINE>
      <COLUMN>98</COLUMN>
    </SFA>
    <DEFECTCODE>26493</DEFECTCODE>
    <DESCRIPTION>Don't use C-style casts (type.4).</DESCRIPTION>
    <FUNCTION>LogWriterInterface::SetCustomLogState</FUNCTION>
    <DECORATED>?SetCustomLogState@LogWriterInterface@@UEAAXHPEAX@Z</DECORATED>
    <FUNCLINE>57</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>57</LINE>
      <COLUMN>120</COLUMN>
    </SFA>
    <DEFECTCODE>26493</DEFECTCODE>
    <DESCRIPTION>Don't use C-style casts (type.4).</DESCRIPTION>
    <FUNCTION>LogWriterInterface::SetCustomLogState</FUNCTION>
    <DECORATED>?SetCustomLogState@LogWriterInterface@@UEAAXHPEAX@Z</DECORATED>
    <FUNCLINE>57</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>57</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'LogWriterInterface::SetCustomLogState' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>LogWriterInterface::SetCustomLogState</FUNCTION>
    <DECORATED>?SetCustomLogState@LogWriterInterface@@UEAAXHPEAX@Z</DECORATED>
    <FUNCLINE>57</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>60</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'LogWriterInterface::IsOutputStreamOpen' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>LogWriterInterface::IsOutputStreamOpen</FUNCTION>
    <DECORATED>?IsOutputStreamOpen@LogWriterInterface@@UEAA_NXZ</DECORATED>
    <FUNCLINE>60</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>62</LINE>
      <COLUMN>96</COLUMN>
    </SFA>
    <DEFECTCODE>26493</DEFECTCODE>
    <DESCRIPTION>Don't use C-style casts (type.4).</DESCRIPTION>
    <FUNCTION>LogWriterInterface::OpenOutputStream</FUNCTION>
    <DECORATED>?OpenOutputStream@LogWriterInterface@@UEAAXV?$basic_string_view@DU?$char_traits@D@std@@@std@@H@Z</DECORATED>
    <FUNCLINE>62</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>62</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'LogWriterInterface::OpenOutputStream' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>LogWriterInterface::OpenOutputStream</FUNCTION>
    <DECORATED>?OpenOutputStream@LogWriterInterface@@UEAAXV?$basic_string_view@DU?$char_traits@D@std@@@std@@H@Z</DECORATED>
    <FUNCLINE>62</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>64</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'LogWriterInterface::CloseOutputStream' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>LogWriterInterface::CloseOutputStream</FUNCTION>
    <DECORATED>?CloseOutputStream@LogWriterInterface@@UEAAXXZ</DECORATED>
    <FUNCLINE>64</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>66</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'LogWriterInterface::FlushOutputStream' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>LogWriterInterface::FlushOutputStream</FUNCTION>
    <DECORATED>?FlushOutputStream@LogWriterInterface@@UEAAXXZ</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>67</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>26432</DEFECTCODE>
    <DESCRIPTION>If you define or delete any default operation in the type 'class LogWriterInterface', define or delete them all (c.21).</DESCRIPTION>
    <FUNCTION>LogWriterInterface::{dtor}</FUNCTION>
    <DECORATED>??1LogWriterInterface@@UEAA@XZ</DECORATED>
    <FUNCLINE>67</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>86</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultPassiveLogWriter::LogMsg' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DefaultPassiveLogWriter::LogMsg</FUNCTION>
    <DECORATED>?LogMsg@DefaultPassiveLogWriter@@UEAAXIV?$basic_string_view@DU?$char_traits@D@std@@@std@@@Z</DECORATED>
    <FUNCLINE>86</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>86</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultPassiveLogWriter::LogMsg' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>DefaultPassiveLogWriter::LogMsg</FUNCTION>
    <DECORATED>?LogMsg@DefaultPassiveLogWriter@@UEAAXIV?$basic_string_view@DU?$char_traits@D@std@@@std@@@Z</DECORATED>
    <FUNCLINE>86</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>87</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultPassiveLogWriter::LogVar' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DefaultPassiveLogWriter::LogVar</FUNCTION>
    <DECORATED>?LogVar@DefaultPassiveLogWriter@@UEAAXIV?$basic_string_view@DU?$char_traits@D@std@@@std@@0@Z</DECORATED>
    <FUNCLINE>87</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>87</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultPassiveLogWriter::LogVar' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>DefaultPassiveLogWriter::LogVar</FUNCTION>
    <DECORATED>?LogVar@DefaultPassiveLogWriter@@UEAAXIV?$basic_string_view@DU?$char_traits@D@std@@@std@@0@Z</DECORATED>
    <FUNCLINE>87</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>88</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultPassiveLogWriter::LogMsgSource' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DefaultPassiveLogWriter::LogMsgSource</FUNCTION>
    <DECORATED>?LogMsgSource@DefaultPassiveLogWriter@@UEAAXIV?$basic_string_view@DU?$char_traits@D@std@@@std@@I0@Z</DECORATED>
    <FUNCLINE>88</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>88</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultPassiveLogWriter::LogMsgSource' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>DefaultPassiveLogWriter::LogMsgSource</FUNCTION>
    <DECORATED>?LogMsgSource@DefaultPassiveLogWriter@@UEAAXIV?$basic_string_view@DU?$char_traits@D@std@@@std@@I0@Z</DECORATED>
    <FUNCLINE>88</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>89</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultPassiveLogWriter::LogVarSource' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DefaultPassiveLogWriter::LogVarSource</FUNCTION>
    <DECORATED>?LogVarSource@DefaultPassiveLogWriter@@UEAAXIV?$basic_string_view@DU?$char_traits@D@std@@@std@@I00@Z</DECORATED>
    <FUNCLINE>89</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>89</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultPassiveLogWriter::LogVarSource' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>DefaultPassiveLogWriter::LogVarSource</FUNCTION>
    <DECORATED>?LogVarSource@DefaultPassiveLogWriter@@UEAAXIV?$basic_string_view@DU?$char_traits@D@std@@@std@@I00@Z</DECORATED>
    <FUNCLINE>89</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>91</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultPassiveLogWriter::LogByPartsStart' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DefaultPassiveLogWriter::LogByPartsStart</FUNCTION>
    <DECORATED>?LogByPartsStart@DefaultPassiveLogWriter@@UEAAXXZ</DECORATED>
    <FUNCLINE>91</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>91</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultPassiveLogWriter::LogByPartsStart' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>DefaultPassiveLogWriter::LogByPartsStart</FUNCTION>
    <DECORATED>?LogByPartsStart@DefaultPassiveLogWriter@@UEAAXXZ</DECORATED>
    <FUNCLINE>91</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>92</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultPassiveLogWriter::LogByPartsLvl' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DefaultPassiveLogWriter::LogByPartsLvl</FUNCTION>
    <DECORATED>?LogByPartsLvl@DefaultPassiveLogWriter@@UEAAXI@Z</DECORATED>
    <FUNCLINE>92</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>92</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultPassiveLogWriter::LogByPartsLvl' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>DefaultPassiveLogWriter::LogByPartsLvl</FUNCTION>
    <DECORATED>?LogByPartsLvl@DefaultPassiveLogWriter@@UEAAXI@Z</DECORATED>
    <FUNCLINE>92</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>93</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultPassiveLogWriter::LogByPartsSource' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DefaultPassiveLogWriter::LogByPartsSource</FUNCTION>
    <DECORATED>?LogByPartsSource@DefaultPassiveLogWriter@@UEAAXV?$basic_string_view@DU?$char_traits@D@std@@@std@@I@Z</DECORATED>
    <FUNCLINE>93</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>93</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultPassiveLogWriter::LogByPartsSource' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>DefaultPassiveLogWriter::LogByPartsSource</FUNCTION>
    <DECORATED>?LogByPartsSource@DefaultPassiveLogWriter@@UEAAXV?$basic_string_view@DU?$char_traits@D@std@@@std@@I@Z</DECORATED>
    <FUNCLINE>93</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>94</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultPassiveLogWriter::LogByPartsMsg' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DefaultPassiveLogWriter::LogByPartsMsg</FUNCTION>
    <DECORATED>?LogByPartsMsg@DefaultPassiveLogWriter@@UEAAXV?$basic_string_view@DU?$char_traits@D@std@@@std@@@Z</DECORATED>
    <FUNCLINE>94</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>94</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultPassiveLogWriter::LogByPartsMsg' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>DefaultPassiveLogWriter::LogByPartsMsg</FUNCTION>
    <DECORATED>?LogByPartsMsg@DefaultPassiveLogWriter@@UEAAXV?$basic_string_view@DU?$char_traits@D@std@@@std@@@Z</DECORATED>
    <FUNCLINE>94</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>95</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultPassiveLogWriter::LogByPartsVar' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DefaultPassiveLogWriter::LogByPartsVar</FUNCTION>
    <DECORATED>?LogByPartsVar@DefaultPassiveLogWriter@@UEAAXV?$basic_string_view@DU?$char_traits@D@std@@@std@@0@Z</DECORATED>
    <FUNCLINE>95</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>95</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultPassiveLogWriter::LogByPartsVar' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>DefaultPassiveLogWriter::LogByPartsVar</FUNCTION>
    <DECORATED>?LogByPartsVar@DefaultPassiveLogWriter@@UEAAXV?$basic_string_view@DU?$char_traits@D@std@@@std@@0@Z</DECORATED>
    <FUNCLINE>95</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>96</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultPassiveLogWriter::LogByPartsFinish' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DefaultPassiveLogWriter::LogByPartsFinish</FUNCTION>
    <DECORATED>?LogByPartsFinish@DefaultPassiveLogWriter@@UEAAXXZ</DECORATED>
    <FUNCLINE>96</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>96</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultPassiveLogWriter::LogByPartsFinish' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>DefaultPassiveLogWriter::LogByPartsFinish</FUNCTION>
    <DECORATED>?LogByPartsFinish@DefaultPassiveLogWriter@@UEAAXXZ</DECORATED>
    <FUNCLINE>96</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>98</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultPassiveLogWriter::IsPassiveLogger' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DefaultPassiveLogWriter::IsPassiveLogger</FUNCTION>
    <DECORATED>?IsPassiveLogger@DefaultPassiveLogWriter@@UEAA_NXZ</DECORATED>
    <FUNCLINE>98</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>98</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultPassiveLogWriter::IsPassiveLogger' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>DefaultPassiveLogWriter::IsPassiveLogger</FUNCTION>
    <DECORATED>?IsPassiveLogger@DefaultPassiveLogWriter@@UEAA_NXZ</DECORATED>
    <FUNCLINE>98</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>100</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultPassiveLogWriter::IsOutputStreamOpen' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DefaultPassiveLogWriter::IsOutputStreamOpen</FUNCTION>
    <DECORATED>?IsOutputStreamOpen@DefaultPassiveLogWriter@@UEAA_NXZ</DECORATED>
    <FUNCLINE>100</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>100</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultPassiveLogWriter::IsOutputStreamOpen' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>DefaultPassiveLogWriter::IsOutputStreamOpen</FUNCTION>
    <DECORATED>?IsOutputStreamOpen@DefaultPassiveLogWriter@@UEAA_NXZ</DECORATED>
    <FUNCLINE>100</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>101</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultPassiveLogWriter::OpenOutputStream' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DefaultPassiveLogWriter::OpenOutputStream</FUNCTION>
    <DECORATED>?OpenOutputStream@DefaultPassiveLogWriter@@UEAAXV?$basic_string_view@DU?$char_traits@D@std@@@std@@H@Z</DECORATED>
    <FUNCLINE>101</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>101</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultPassiveLogWriter::OpenOutputStream' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>DefaultPassiveLogWriter::OpenOutputStream</FUNCTION>
    <DECORATED>?OpenOutputStream@DefaultPassiveLogWriter@@UEAAXV?$basic_string_view@DU?$char_traits@D@std@@@std@@H@Z</DECORATED>
    <FUNCLINE>101</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>102</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultPassiveLogWriter::CloseOutputStream' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DefaultPassiveLogWriter::CloseOutputStream</FUNCTION>
    <DECORATED>?CloseOutputStream@DefaultPassiveLogWriter@@UEAAXXZ</DECORATED>
    <FUNCLINE>102</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>102</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultPassiveLogWriter::CloseOutputStream' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>DefaultPassiveLogWriter::CloseOutputStream</FUNCTION>
    <DECORATED>?CloseOutputStream@DefaultPassiveLogWriter@@UEAAXXZ</DECORATED>
    <FUNCLINE>102</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>103</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultPassiveLogWriter::FlushOutputStream' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DefaultPassiveLogWriter::FlushOutputStream</FUNCTION>
    <DECORATED>?FlushOutputStream@DefaultPassiveLogWriter@@UEAAXXZ</DECORATED>
    <FUNCLINE>103</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>103</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultPassiveLogWriter::FlushOutputStream' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>DefaultPassiveLogWriter::FlushOutputStream</FUNCTION>
    <DECORATED>?FlushOutputStream@DefaultPassiveLogWriter@@UEAAXXZ</DECORATED>
    <FUNCLINE>103</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>104</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>26443</DEFECTCODE>
    <DESCRIPTION>Overriding destructor should not use explicit 'override' or 'virtual' specifiers (c.128).</DESCRIPTION>
    <FUNCTION>DefaultPassiveLogWriter::{dtor}</FUNCTION>
    <DECORATED>??1DefaultPassiveLogWriter@@UEAA@XZ</DECORATED>
    <FUNCLINE>104</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>104</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>26432</DEFECTCODE>
    <DESCRIPTION>If you define or delete any default operation in the type 'class DefaultPassiveLogWriter', define or delete them all (c.21).</DESCRIPTION>
    <FUNCTION>DefaultPassiveLogWriter::{dtor}</FUNCTION>
    <DECORATED>??1DefaultPassiveLogWriter@@UEAA@XZ</DECORATED>
    <FUNCLINE>104</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>166</LINE>
      <COLUMN>8</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>DefaultOperativeLogWriter::{ctor}</FUNCTION>
    <DECORATED>??0DefaultOperativeLogWriter@@QEAA@XZ</DECORATED>
    <FUNCLINE>166</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>179</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultOperativeLogWriter::LogMsg' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DefaultOperativeLogWriter::LogMsg</FUNCTION>
    <DECORATED>?LogMsg@DefaultOperativeLogWriter@@UEAAXIV?$basic_string_view@DU?$char_traits@D@std@@@std@@@Z</DECORATED>
    <FUNCLINE>179</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>186</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultOperativeLogWriter::LogVar' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DefaultOperativeLogWriter::LogVar</FUNCTION>
    <DECORATED>?LogVar@DefaultOperativeLogWriter@@UEAAXIV?$basic_string_view@DU?$char_traits@D@std@@@std@@0@Z</DECORATED>
    <FUNCLINE>186</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>193</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultOperativeLogWriter::LogMsgSource' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DefaultOperativeLogWriter::LogMsgSource</FUNCTION>
    <DECORATED>?LogMsgSource@DefaultOperativeLogWriter@@UEAAXIV?$basic_string_view@DU?$char_traits@D@std@@@std@@I0@Z</DECORATED>
    <FUNCLINE>193</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>202</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultOperativeLogWriter::LogVarSource' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DefaultOperativeLogWriter::LogVarSource</FUNCTION>
    <DECORATED>?LogVarSource@DefaultOperativeLogWriter@@UEAAXIV?$basic_string_view@DU?$char_traits@D@std@@@std@@I00@Z</DECORATED>
    <FUNCLINE>202</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>212</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultOperativeLogWriter::LogByPartsStart' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DefaultOperativeLogWriter::LogByPartsStart</FUNCTION>
    <DECORATED>?LogByPartsStart@DefaultOperativeLogWriter@@UEAAXXZ</DECORATED>
    <FUNCLINE>212</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>217</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultOperativeLogWriter::LogByPartsSource' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DefaultOperativeLogWriter::LogByPartsSource</FUNCTION>
    <DECORATED>?LogByPartsSource@DefaultOperativeLogWriter@@UEAAXV?$basic_string_view@DU?$char_traits@D@std@@@std@@I@Z</DECORATED>
    <FUNCLINE>217</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>225</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultOperativeLogWriter::LogByPartsLvl' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DefaultOperativeLogWriter::LogByPartsLvl</FUNCTION>
    <DECORATED>?LogByPartsLvl@DefaultOperativeLogWriter@@UEAAXI@Z</DECORATED>
    <FUNCLINE>225</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>233</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultOperativeLogWriter::LogByPartsMsg' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DefaultOperativeLogWriter::LogByPartsMsg</FUNCTION>
    <DECORATED>?LogByPartsMsg@DefaultOperativeLogWriter@@UEAAXV?$basic_string_view@DU?$char_traits@D@std@@@std@@@Z</DECORATED>
    <FUNCLINE>233</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>240</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultOperativeLogWriter::LogByPartsVar' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DefaultOperativeLogWriter::LogByPartsVar</FUNCTION>
    <DECORATED>?LogByPartsVar@DefaultOperativeLogWriter@@UEAAXV?$basic_string_view@DU?$char_traits@D@std@@@std@@0@Z</DECORATED>
    <FUNCLINE>240</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>247</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultOperativeLogWriter::LogByPartsFinish' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DefaultOperativeLogWriter::LogByPartsFinish</FUNCTION>
    <DECORATED>?LogByPartsFinish@DefaultOperativeLogWriter@@UEAAXXZ</DECORATED>
    <FUNCLINE>247</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>295</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>26493</DEFECTCODE>
    <DESCRIPTION>Don't use C-style casts (type.4).</DESCRIPTION>
    <FUNCTION>DefaultOperativeLogWriter::LogCustom</FUNCTION>
    <DECORATED>?LogCustom@DefaultOperativeLogWriter@@UEAAXHIPEAX@Z</DECORATED>
    <FUNCLINE>293</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>295</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26493</DEFECTCODE>
    <DESCRIPTION>Don't use C-style casts (type.4).</DESCRIPTION>
    <FUNCTION>DefaultOperativeLogWriter::LogCustom</FUNCTION>
    <DECORATED>?LogCustom@DefaultOperativeLogWriter@@UEAAXHIPEAX@Z</DECORATED>
    <FUNCLINE>293</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>295</LINE>
      <COLUMN>50</COLUMN>
    </SFA>
    <DEFECTCODE>26493</DEFECTCODE>
    <DESCRIPTION>Don't use C-style casts (type.4).</DESCRIPTION>
    <FUNCTION>DefaultOperativeLogWriter::LogCustom</FUNCTION>
    <DECORATED>?LogCustom@DefaultOperativeLogWriter@@UEAAXHIPEAX@Z</DECORATED>
    <FUNCLINE>293</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>293</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultOperativeLogWriter::LogCustom' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DefaultOperativeLogWriter::LogCustom</FUNCTION>
    <DECORATED>?LogCustom@DefaultOperativeLogWriter@@UEAAXHIPEAX@Z</DECORATED>
    <FUNCLINE>293</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>293</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultOperativeLogWriter::LogCustom' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>DefaultOperativeLogWriter::LogCustom</FUNCTION>
    <DECORATED>?LogCustom@DefaultOperativeLogWriter@@UEAAXHIPEAX@Z</DECORATED>
    <FUNCLINE>293</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>298</LINE>
      <COLUMN>101</COLUMN>
    </SFA>
    <DEFECTCODE>26493</DEFECTCODE>
    <DESCRIPTION>Don't use C-style casts (type.4).</DESCRIPTION>
    <FUNCTION>DefaultOperativeLogWriter::SetCustomLogState</FUNCTION>
    <DECORATED>?SetCustomLogState@DefaultOperativeLogWriter@@UEAAXHPEAX@Z</DECORATED>
    <FUNCLINE>298</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>298</LINE>
      <COLUMN>126</COLUMN>
    </SFA>
    <DEFECTCODE>26493</DEFECTCODE>
    <DESCRIPTION>Don't use C-style casts (type.4).</DESCRIPTION>
    <FUNCTION>DefaultOperativeLogWriter::SetCustomLogState</FUNCTION>
    <DECORATED>?SetCustomLogState@DefaultOperativeLogWriter@@UEAAXHPEAX@Z</DECORATED>
    <FUNCLINE>298</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>298</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultOperativeLogWriter::SetCustomLogState' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DefaultOperativeLogWriter::SetCustomLogState</FUNCTION>
    <DECORATED>?SetCustomLogState@DefaultOperativeLogWriter@@UEAAXHPEAX@Z</DECORATED>
    <FUNCLINE>298</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>298</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultOperativeLogWriter::SetCustomLogState' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>DefaultOperativeLogWriter::SetCustomLogState</FUNCTION>
    <DECORATED>?SetCustomLogState@DefaultOperativeLogWriter@@UEAAXHPEAX@Z</DECORATED>
    <FUNCLINE>298</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>343</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultOperativeLogWriter::IsPassiveLogger' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DefaultOperativeLogWriter::IsPassiveLogger</FUNCTION>
    <DECORATED>?IsPassiveLogger@DefaultOperativeLogWriter@@UEAA_NXZ</DECORATED>
    <FUNCLINE>343</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>343</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultOperativeLogWriter::IsPassiveLogger' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>DefaultOperativeLogWriter::IsPassiveLogger</FUNCTION>
    <DECORATED>?IsPassiveLogger@DefaultOperativeLogWriter@@UEAA_NXZ</DECORATED>
    <FUNCLINE>343</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>344</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultOperativeLogWriter::IsOutputStreamOpen' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DefaultOperativeLogWriter::IsOutputStreamOpen</FUNCTION>
    <DECORATED>?IsOutputStreamOpen@DefaultOperativeLogWriter@@UEAA_NXZ</DECORATED>
    <FUNCLINE>344</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>348</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultOperativeLogWriter::OpenOutputStream' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DefaultOperativeLogWriter::OpenOutputStream</FUNCTION>
    <DECORATED>?OpenOutputStream@DefaultOperativeLogWriter@@UEAAXV?$basic_string_view@DU?$char_traits@D@std@@@std@@H@Z</DECORATED>
    <FUNCLINE>348</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>352</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultOperativeLogWriter::CloseOutputStream' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DefaultOperativeLogWriter::CloseOutputStream</FUNCTION>
    <DECORATED>?CloseOutputStream@DefaultOperativeLogWriter@@UEAAXXZ</DECORATED>
    <FUNCLINE>352</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>356</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultOperativeLogWriter::FlushOutputStream' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DefaultOperativeLogWriter::FlushOutputStream</FUNCTION>
    <DECORATED>?FlushOutputStream@DefaultOperativeLogWriter@@UEAAXXZ</DECORATED>
    <FUNCLINE>356</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>360</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>26443</DEFECTCODE>
    <DESCRIPTION>Overriding destructor should not use explicit 'override' or 'virtual' specifiers (c.128).</DESCRIPTION>
    <FUNCTION>DefaultOperativeLogWriter::{dtor}</FUNCTION>
    <DECORATED>??1DefaultOperativeLogWriter@@UEAA@XZ</DECORATED>
    <FUNCLINE>360</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>360</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>26432</DEFECTCODE>
    <DESCRIPTION>If you define or delete any default operation in the type 'class DefaultOperativeLogWriter', define or delete them all (c.21).</DESCRIPTION>
    <FUNCTION>DefaultOperativeLogWriter::{dtor}</FUNCTION>
    <DECORATED>??1DefaultOperativeLogWriter@@UEAA@XZ</DECORATED>
    <FUNCLINE>360</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>360</LINE>
      <COLUMN>60</COLUMN>
    </SFA>
    <DEFECTCODE>26447</DEFECTCODE>
    <DESCRIPTION>The function is declared 'noexcept' but calls function 'TearDown()' which may throw exceptions (f.6).</DESCRIPTION>
    <FUNCTION>DefaultOperativeLogWriter::{dtor}</FUNCTION>
    <DECORATED>??1DefaultOperativeLogWriter@@UEAA@XZ</DECORATED>
    <FUNCLINE>360</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>371</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>26485</DEFECTCODE>
    <DESCRIPTION>Expression 'str': No array to pointer decay (bounds.3).</DESCRIPTION>
    <FUNCTION>DefaultOperativeLogWriter::AddFormatedDate</FUNCTION>
    <DECORATED>?AddFormatedDate@DefaultOperativeLogWriter@@AEBAXAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z</DECORATED>
    <FUNCLINE>365</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>373</LINE>
      <COLUMN>16</COLUMN>
    </SFA>
    <DEFECTCODE>26485</DEFECTCODE>
    <DESCRIPTION>Expression 'str': No array to pointer decay (bounds.3).</DESCRIPTION>
    <FUNCTION>DefaultOperativeLogWriter::AddFormatedDate</FUNCTION>
    <DECORATED>?AddFormatedDate@DefaultOperativeLogWriter@@AEBAXAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z</DECORATED>
    <FUNCLINE>365</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>435</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultOperativeLogWriter::ResetString' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>DefaultOperativeLogWriter::ResetString</FUNCTION>
    <DECORATED>?ResetString@DefaultOperativeLogWriter@@AEBAXAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z</DECORATED>
    <FUNCLINE>435</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogWriter.h</FILENAME>
      <LINE>479</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'DefaultOperativeLogWriter::IncrementEntryIndex' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>DefaultOperativeLogWriter::IncrementEntryIndex</FUNCTION>
    <DECORATED>?IncrementEntryIndex@DefaultOperativeLogWriter@@AEAAXXZ</DECORATED>
    <FUNCLINE>479</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>LogDataInterpret.h</FILENAME>
      <LINE>81</LINE>
      <COLUMN>126</COLUMN>
    </SFA>
    <DEFECTCODE>26490</DEFECTCODE>
    <DESCRIPTION>Don't use reinterpret_cast (type.1).</DESCRIPTION>
    <FUNCTION>DefaultDataInterpret::InetrpretArg</FUNCTION>
    <DECORATED>?InetrpretArg@DefaultDataInterpret@@QEAAXPEAXAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z</DECORATED>
    <FUNCLINE>81</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>6</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::{ctor}</FUNCTION>
    <DECORATED>??0Logger_DoLogginglevels_Test@DynamicLogger@@QEAA@XZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>6</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26426</DEFECTCODE>
    <DESCRIPTION>Global initializer calls a non-constexpr function 'operator new' (i.22).</DESCRIPTION>
    <FUNCTION>`dynamic initializer for 'DynamicLogger::Logger_DoLogginglevels_Test::test_info_''</FUNCTION>
    <DECORATED>??__E?test_info_@Logger_DoLogginglevels_Test@DynamicLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>6</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>11</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>12</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>14</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>20</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>21</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>25</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>26</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>30</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>31</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>35</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>36</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>38</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>43</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>44</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>45</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>48</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>49</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>50</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>53</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>54</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>57</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>58</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>59</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>62</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>63</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>64</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>67</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>68</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>70</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>6</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DynamicLogger::Logger_DoLogginglevels_Test::TestBody' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>11</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>12</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>14</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>20</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>21</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>25</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>26</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>30</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>31</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>35</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>36</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>38</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>43</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>44</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>45</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>48</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>49</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>50</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>53</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>54</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>57</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>58</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>59</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>62</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>63</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>64</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>67</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>68</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>70</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLogginglevels_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLogginglevels_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>74</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLog_Test::{ctor}</FUNCTION>
    <DECORATED>??0Logger_DoLog_Test@DynamicLogger@@QEAA@XZ</DECORATED>
    <FUNCLINE>74</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>74</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26426</DEFECTCODE>
    <DESCRIPTION>Global initializer calls a non-constexpr function 'operator new' (i.22).</DESCRIPTION>
    <FUNCTION>`dynamic initializer for 'DynamicLogger::Logger_DoLog_Test::test_info_''</FUNCTION>
    <DECORATED>??__E?test_info_@Logger_DoLog_Test@DynamicLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ</DECORATED>
    <FUNCLINE>74</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>74</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>78</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLog_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>74</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>79</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLog_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>74</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>82</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLog_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>74</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>85</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLog_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>74</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>88</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLog_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>74</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>91</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLog_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>74</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>94</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLog_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>74</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>74</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DynamicLogger::Logger_DoLog_Test::TestBody' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLog_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>74</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>78</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLog_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>74</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>79</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLog_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>74</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>82</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLog_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>74</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>85</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLog_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>74</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>88</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLog_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>74</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>91</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLog_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>74</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>94</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_DoLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLog_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>74</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>97</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::{ctor}</FUNCTION>
    <DECORATED>??0Logger_Construction_Test@DynamicLogger@@QEAA@XZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>97</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26426</DEFECTCODE>
    <DESCRIPTION>Global initializer calls a non-constexpr function 'operator new' (i.22).</DESCRIPTION>
    <FUNCTION>`dynamic initializer for 'DynamicLogger::Logger_Construction_Test::test_info_''</FUNCTION>
    <DECORATED>??__E?test_info_@Logger_Construction_Test@DynamicLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>97</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>101</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>103</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>104</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>106</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>107</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>111</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>112</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>115</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>116</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>117</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>118</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>119</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>120</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>123</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>124</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>125</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>126</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>97</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DynamicLogger::Logger_Construction_Test::TestBody' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>101</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>103</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>104</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>106</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>107</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>111</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>112</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>115</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>116</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>117</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>118</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>119</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>120</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>123</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>124</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>125</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>126</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_Construction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_Construction_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>131</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_StaticFunctions_Test::{ctor}</FUNCTION>
    <DECORATED>??0Logger_StaticFunctions_Test@DynamicLogger@@QEAA@XZ</DECORATED>
    <FUNCLINE>131</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>131</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26426</DEFECTCODE>
    <DESCRIPTION>Global initializer calls a non-constexpr function 'operator new' (i.22).</DESCRIPTION>
    <FUNCTION>`dynamic initializer for 'DynamicLogger::Logger_StaticFunctions_Test::test_info_''</FUNCTION>
    <DECORATED>??__E?test_info_@Logger_StaticFunctions_Test@DynamicLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ</DECORATED>
    <FUNCLINE>131</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>131</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>136</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_StaticFunctions_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_StaticFunctions_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>131</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>137</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_StaticFunctions_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_StaticFunctions_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>131</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>139</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_StaticFunctions_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_StaticFunctions_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>131</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>140</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_StaticFunctions_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_StaticFunctions_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>131</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>144</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_StaticFunctions_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_StaticFunctions_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>131</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>147</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_StaticFunctions_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_StaticFunctions_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>131</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>148</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_StaticFunctions_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_StaticFunctions_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>131</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>150</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_StaticFunctions_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_StaticFunctions_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>131</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>151</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_StaticFunctions_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_StaticFunctions_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>131</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>155</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_StaticFunctions_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_StaticFunctions_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>131</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>157</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_StaticFunctions_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_StaticFunctions_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>131</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>158</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_StaticFunctions_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_StaticFunctions_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>131</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>159</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_StaticFunctions_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_StaticFunctions_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>131</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>131</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DynamicLogger::Logger_StaticFunctions_Test::TestBody' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_StaticFunctions_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_StaticFunctions_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>131</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>136</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_StaticFunctions_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_StaticFunctions_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>131</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>137</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_StaticFunctions_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_StaticFunctions_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>131</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>139</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_StaticFunctions_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_StaticFunctions_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>131</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>140</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_StaticFunctions_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_StaticFunctions_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>131</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>144</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_StaticFunctions_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_StaticFunctions_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>131</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>147</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_StaticFunctions_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_StaticFunctions_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>131</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>148</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_StaticFunctions_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_StaticFunctions_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>131</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>150</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_StaticFunctions_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_StaticFunctions_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>131</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>151</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_StaticFunctions_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_StaticFunctions_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>131</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>155</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_StaticFunctions_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_StaticFunctions_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>131</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>157</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_StaticFunctions_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_StaticFunctions_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>131</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>158</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_StaticFunctions_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_StaticFunctions_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>131</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>159</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_StaticFunctions_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_StaticFunctions_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>131</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>162</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::{ctor}</FUNCTION>
    <DECORATED>??0Logger_PointerGettingSetting_Test@DynamicLogger@@QEAA@XZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>162</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26426</DEFECTCODE>
    <DESCRIPTION>Global initializer calls a non-constexpr function 'operator new' (i.22).</DESCRIPTION>
    <FUNCTION>`dynamic initializer for 'DynamicLogger::Logger_PointerGettingSetting_Test::test_info_''</FUNCTION>
    <DECORATED>??__E?test_info_@Logger_PointerGettingSetting_Test@DynamicLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>162</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>170</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>171</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>173</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>174</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>183</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>186</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>187</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>188</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>191</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>198</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>201</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>206</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>209</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>214</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>217</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>224</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>225</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>230</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>231</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>237</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>238</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>180</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26462</DEFECTCODE>
    <DESCRIPTION>The value pointed to by 'location1' is assigned only once, mark it as a pointer to const (con.4).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>181</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26462</DEFECTCODE>
    <DESCRIPTION>The value pointed to by 'location2' is assigned only once, mark it as a pointer to const (con.4).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>162</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'DynamicLogger::Logger_PointerGettingSetting_Test::TestBody' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>170</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>171</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>173</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>174</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>183</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>186</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>187</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>188</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>191</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>198</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>201</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>206</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>209</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>214</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>217</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>224</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>225</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>230</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>231</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>237</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>DynamicLog.cpp</FILENAME>
      <LINE>238</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>DynamicLogger::Logger_PointerGettingSetting_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_PointerGettingSetting_Test@DynamicLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-internal.h</FILENAME>
      <LINE>472</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION>testing::internal::TestFactoryImpl&lt;DynamicLogger::Logger_PointerGettingSetting_Test&gt;::CreateTest</FUNCTION>
    <DECORATED>?CreateTest@?$TestFactoryImpl@VLogger_PointerGettingSetting_Test@DynamicLogger@@@internal@testing@@UEAAPEAVTest@3@XZ</DECORATED>
    <FUNCLINE>472</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-internal.h</FILENAME>
      <LINE>472</LINE>
      <COLUMN>16</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::TestFactoryImpl&lt;DynamicLogger::Logger_PointerGettingSetting_Test&gt;::CreateTest' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>testing::internal::TestFactoryImpl&lt;DynamicLogger::Logger_PointerGettingSetting_Test&gt;::CreateTest</FUNCTION>
    <DECORATED>?CreateTest@?$TestFactoryImpl@VLogger_PointerGettingSetting_Test@DynamicLogger@@@internal@testing@@UEAAPEAVTest@3@XZ</DECORATED>
    <FUNCLINE>472</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>489</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'Logger&lt;DefaultDataInterpret&gt;::GetPassiveLogWriter' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::GetPassiveLogWriter</FUNCTION>
    <DECORATED>?GetPassiveLogWriter@?$Logger@VDefaultDataInterpret@@@@QEBAPEAVLogWriterInterface@@XZ</DECORATED>
    <FUNCLINE>489</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>487</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'Logger&lt;DefaultDataInterpret&gt;::GetOperativeLogWriter' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::GetOperativeLogWriter</FUNCTION>
    <DECORATED>?GetOperativeLogWriter@?$Logger@VDefaultDataInterpret@@@@QEBAPEAVLogWriterInterface@@XZ</DECORATED>
    <FUNCLINE>487</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>248</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>26482</DEFECTCODE>
    <DESCRIPTION>Only index into arrays using constant expressions (bounds.2).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::IsLoggingLevelEnabled</FUNCTION>
    <DECORATED>?IsLoggingLevelEnabled@?$Logger@VDefaultDataInterpret@@@@QEBA_NI@Z</DECORATED>
    <FUNCLINE>244</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>248</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::IsLoggingLevelEnabled</FUNCTION>
    <DECORATED>?IsLoggingLevelEnabled@?$Logger@VDefaultDataInterpret@@@@QEBA_NI@Z</DECORATED>
    <FUNCLINE>244</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>242</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'Logger&lt;DefaultDataInterpret&gt;::IsLoggingEnabled' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::IsLoggingEnabled</FUNCTION>
    <DECORATED>?IsLoggingEnabled@?$Logger@VDefaultDataInterpret@@@@QEBA_NXZ</DECORATED>
    <FUNCLINE>242</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>234</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26482</DEFECTCODE>
    <DESCRIPTION>Only index into arrays using constant expressions (bounds.2).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::DoLoggingLevel</FUNCTION>
    <DECORATED>?DoLoggingLevel@?$Logger@VDefaultDataInterpret@@@@QEAAXI_N@Z</DECORATED>
    <FUNCLINE>230</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>236</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26482</DEFECTCODE>
    <DESCRIPTION>Only index into arrays using constant expressions (bounds.2).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::DoLoggingLevel</FUNCTION>
    <DECORATED>?DoLoggingLevel@?$Logger@VDefaultDataInterpret@@@@QEAAXI_N@Z</DECORATED>
    <FUNCLINE>230</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>238</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26482</DEFECTCODE>
    <DESCRIPTION>Only index into arrays using constant expressions (bounds.2).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::DoLoggingLevel</FUNCTION>
    <DECORATED>?DoLoggingLevel@?$Logger@VDefaultDataInterpret@@@@QEAAXI_N@Z</DECORATED>
    <FUNCLINE>230</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>234</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::DoLoggingLevel</FUNCTION>
    <DECORATED>?DoLoggingLevel@?$Logger@VDefaultDataInterpret@@@@QEAAXI_N@Z</DECORATED>
    <FUNCLINE>230</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>236</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::DoLoggingLevel</FUNCTION>
    <DECORATED>?DoLoggingLevel@?$Logger@VDefaultDataInterpret@@@@QEAAXI_N@Z</DECORATED>
    <FUNCLINE>230</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>238</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::DoLoggingLevel</FUNCTION>
    <DECORATED>?DoLoggingLevel@?$Logger@VDefaultDataInterpret@@@@QEAAXI_N@Z</DECORATED>
    <FUNCLINE>230</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>41</LINE>
      <COLUMN>8</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::{ctor}</FUNCTION>
    <DECORATED>??0?$Logger@VDefaultDataInterpret@@@@QEAA@XZ</DECORATED>
    <FUNCLINE>41</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>522</LINE>
      <COLUMN>90</COLUMN>
    </SFA>
    <DEFECTCODE>26482</DEFECTCODE>
    <DESCRIPTION>Only index into arrays using constant expressions (bounds.2).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::GetLevelPointerInternal</FUNCTION>
    <DECORATED>?GetLevelPointerInternal@?$Logger@VDefaultDataInterpret@@@@AEBAPEAVLogWriterInterface@@I@Z</DECORATED>
    <FUNCLINE>522</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>522</LINE>
      <COLUMN>120</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::GetLevelPointerInternal</FUNCTION>
    <DECORATED>?GetLevelPointerInternal@?$Logger@VDefaultDataInterpret@@@@AEBAPEAVLogWriterInterface@@I@Z</DECORATED>
    <FUNCLINE>522</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>522</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'Logger&lt;DefaultDataInterpret&gt;::GetLevelPointerInternal' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::GetLevelPointerInternal</FUNCTION>
    <DECORATED>?GetLevelPointerInternal@?$Logger@VDefaultDataInterpret@@@@AEBAPEAVLogWriterInterface@@I@Z</DECORATED>
    <FUNCLINE>522</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>346</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26482</DEFECTCODE>
    <DESCRIPTION>Only index into arrays using constant expressions (bounds.2).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::RebuildLevelPointerArray</FUNCTION>
    <DECORATED>?RebuildLevelPointerArray@?$Logger@VDefaultDataInterpret@@@@AEAAXXZ</DECORATED>
    <FUNCLINE>340</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>348</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26482</DEFECTCODE>
    <DESCRIPTION>Only index into arrays using constant expressions (bounds.2).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::RebuildLevelPointerArray</FUNCTION>
    <DECORATED>?RebuildLevelPointerArray@?$Logger@VDefaultDataInterpret@@@@AEAAXXZ</DECORATED>
    <FUNCLINE>340</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>346</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::RebuildLevelPointerArray</FUNCTION>
    <DECORATED>?RebuildLevelPointerArray@?$Logger@VDefaultDataInterpret@@@@AEAAXXZ</DECORATED>
    <FUNCLINE>340</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>348</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::RebuildLevelPointerArray</FUNCTION>
    <DECORATED>?RebuildLevelPointerArray@?$Logger@VDefaultDataInterpret@@@@AEAAXXZ</DECORATED>
    <FUNCLINE>340</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>325</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'Logger&lt;DefaultDataInterpret&gt;::ExchangeWriters' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::ExchangeWriters</FUNCTION>
    <DECORATED>?ExchangeWriters@?$Logger@VDefaultDataInterpret@@@@AEBAXV?$unique_ptr@VLogWriterInterface@@U?$default_delete@VLogWriterInterface@@@std@@@std@@AEAV23@@Z</DECORATED>
    <FUNCLINE>325</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>394</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'Logger&lt;DefaultDataInterpret&gt;::ResetTempString' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::ResetTempString</FUNCTION>
    <DECORATED>?ResetTempString@?$Logger@VDefaultDataInterpret@@@@AEAAXXZ</DECORATED>
    <FUNCLINE>394</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>390</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'Logger&lt;DefaultDataInterpret&gt;::ResetStringBuffer' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::ResetStringBuffer</FUNCTION>
    <DECORATED>?ResetStringBuffer@?$Logger@VDefaultDataInterpret@@@@AEAAXXZ</DECORATED>
    <FUNCLINE>390</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>367</LINE>
      <COLUMN>26</COLUMN>
    </SFA>
    <DEFECTCODE>26485</DEFECTCODE>
    <DESCRIPTION>Expression 'this-&gt;LevelStatusArray': No array to pointer decay (bounds.3).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::ResetLevelStatusArray</FUNCTION>
    <DECORATED>?ResetLevelStatusArray@?$Logger@VDefaultDataInterpret@@@@AEAAX_N@Z</DECORATED>
    <FUNCLINE>365</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>355</LINE>
      <COLUMN>31</COLUMN>
    </SFA>
    <DEFECTCODE>26485</DEFECTCODE>
    <DESCRIPTION>Expression 'this-&gt;LevelPointerArray': No array to pointer decay (bounds.3).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::ResetLevelPointerArray</FUNCTION>
    <DECORATED>?ResetLevelPointerArray@?$Logger@VDefaultDataInterpret@@@@AEAAX_N@Z</DECORATED>
    <FUNCLINE>352</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>357</LINE>
      <COLUMN>31</COLUMN>
    </SFA>
    <DEFECTCODE>26485</DEFECTCODE>
    <DESCRIPTION>Expression 'this-&gt;LevelPointerArray': No array to pointer decay (bounds.3).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::ResetLevelPointerArray</FUNCTION>
    <DECORATED>?ResetLevelPointerArray@?$Logger@VDefaultDataInterpret@@@@AEAAX_N@Z</DECORATED>
    <FUNCLINE>352</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>369</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26429</DEFECTCODE>
    <DESCRIPTION>Symbol 'statusArray' is never tested for nullness, it can be marked as not_null (f.23).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::SetStatusArray</FUNCTION>
    <DECORATED>?SetStatusArray@?$Logger@VDefaultDataInterpret@@@@AEBAXQEA_NI_N@Z</DECORATED>
    <FUNCLINE>369</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>g:\work\neural net\neuralnet\gclasses\common\</FILEPATH>
      <FILENAME>log.h</FILENAME>
      <LINE>369</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26485</DEFECTCODE>
    <DESCRIPTION>Expression 'statusArray': No array to pointer decay (bounds.3).</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>372</LINE>
      <COLUMN>31</COLUMN>
    </SFA>
    <DEFECTCODE>26481</DEFECTCODE>
    <DESCRIPTION>Don't use pointer arithmetic. Use span instead (bounds.1).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::SetStatusArray</FUNCTION>
    <DECORATED>?SetStatusArray@?$Logger@VDefaultDataInterpret@@@@AEBAXQEA_NI_N@Z</DECORATED>
    <FUNCLINE>369</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>369</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'Logger&lt;DefaultDataInterpret&gt;::SetStatusArray' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::SetStatusArray</FUNCTION>
    <DECORATED>?SetStatusArray@?$Logger@VDefaultDataInterpret@@@@AEBAXQEA_NI_N@Z</DECORATED>
    <FUNCLINE>369</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>359</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26429</DEFECTCODE>
    <DESCRIPTION>Symbol 'ptrArray' is never tested for nullness, it can be marked as not_null (f.23).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::SetPointerArray</FUNCTION>
    <DECORATED>?SetPointerArray@?$Logger@VDefaultDataInterpret@@@@AEBAXQEAPEAVLogWriterInterface@@IPEAV2@@Z</DECORATED>
    <FUNCLINE>359</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>g:\work\neural net\neuralnet\gclasses\common\</FILEPATH>
      <FILENAME>log.h</FILENAME>
      <LINE>359</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26485</DEFECTCODE>
    <DESCRIPTION>Expression 'ptrArray': No array to pointer decay (bounds.3).</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>362</LINE>
      <COLUMN>28</COLUMN>
    </SFA>
    <DEFECTCODE>26481</DEFECTCODE>
    <DESCRIPTION>Don't use pointer arithmetic. Use span instead (bounds.1).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::SetPointerArray</FUNCTION>
    <DECORATED>?SetPointerArray@?$Logger@VDefaultDataInterpret@@@@AEBAXQEAPEAVLogWriterInterface@@IPEAV2@@Z</DECORATED>
    <FUNCLINE>359</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>359</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'Logger&lt;DefaultDataInterpret&gt;::SetPointerArray' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::SetPointerArray</FUNCTION>
    <DECORATED>?SetPointerArray@?$Logger@VDefaultDataInterpret@@@@AEBAXQEAPEAVLogWriterInterface@@IPEAV2@@Z</DECORATED>
    <FUNCLINE>359</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>255</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>26493</DEFECTCODE>
    <DESCRIPTION>Don't use C-style casts (type.4).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::IsLoggingLevelEnabled</FUNCTION>
    <DECORATED>??$IsLoggingLevelEnabled@$02@?$Logger@VDefaultDataInterpret@@@@QEBA_NXZ</DECORATED>
    <FUNCLINE>252</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>222</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>26493</DEFECTCODE>
    <DESCRIPTION>Don't use C-style casts (type.4).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::DoLoggingLevel</FUNCTION>
    <DECORATED>??$DoLoggingLevel@$02@?$Logger@VDefaultDataInterpret@@@@QEAAX_N@Z</DECORATED>
    <FUNCLINE>219</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>496</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>26493</DEFECTCODE>
    <DESCRIPTION>Don't use C-style casts (type.4).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::GetLevelPointer</FUNCTION>
    <DECORATED>??$GetLevelPointer@$00@?$Logger@VDefaultDataInterpret@@@@QEBAPEAVLogWriterInterface@@XZ</DECORATED>
    <FUNCLINE>492</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>1200</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::scoped_ptr&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; &gt;::{ctor}</FUNCTION>
    <DECORATED>??0?$scoped_ptr@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@internal@testing@@QEAA@PEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z</DECORATED>
    <FUNCLINE>1200</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>479</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'Logger&lt;DefaultDataInterpret&gt;::UnravelAndSetLoggingLevel' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::UnravelAndSetLoggingLevel</FUNCTION>
    <DECORATED>?UnravelAndSetLoggingLevel@?$Logger@VDefaultDataInterpret@@@@AEAAX_N@Z</DECORATED>
    <FUNCLINE>479</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>Log.h</FILENAME>
      <LINE>470</LINE>
      <COLUMN>0</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'Logger&lt;DefaultDataInterpret&gt;::UnravelAndSetLoggingLevel&lt;1&gt;' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>Logger&lt;DefaultDataInterpret&gt;::UnravelAndSetLoggingLevel</FUNCTION>
    <DECORATED>??$UnravelAndSetLoggingLevel@$00@?$Logger@VDefaultDataInterpret@@@@AEAAX_N@Z</DECORATED>
    <FUNCLINE>470</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>G_MemoryFunctions.h</FILENAME>
      <LINE>220</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>26408</DEFECTCODE>
    <DESCRIPTION>Avoid malloc() and free(), prefer the nothrow version of new with delete (r.10).</DESCRIPTION>
    <FUNCTION>AllocateMemory</FUNCTION>
    <DECORATED>?AllocateMemory@@YAPEAX_K@Z</DECORATED>
    <FUNCLINE>218</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>G_MemoryFunctions.h</FILENAME>
      <LINE>218</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'AllocateMemory' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>AllocateMemory</FUNCTION>
    <DECORATED>?AllocateMemory@@YAPEAX_K@Z</DECORATED>
    <FUNCLINE>218</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>7</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>StaticLogger::Logger_CrtpOverloading_Test::{ctor}</FUNCTION>
    <DECORATED>??0Logger_CrtpOverloading_Test@StaticLogger@@QEAA@XZ</DECORATED>
    <FUNCLINE>7</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>7</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26426</DEFECTCODE>
    <DESCRIPTION>Global initializer calls a non-constexpr function 'operator new' (i.22).</DESCRIPTION>
    <FUNCTION>`dynamic initializer for 'StaticLogger::Logger_CrtpOverloading_Test::test_info_''</FUNCTION>
    <DECORATED>??__E?test_info_@Logger_CrtpOverloading_Test@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ</DECORATED>
    <FUNCLINE>7</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>7</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>11</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::Logger_CrtpOverloading_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_CrtpOverloading_Test@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>7</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>12</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::Logger_CrtpOverloading_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_CrtpOverloading_Test@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>7</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>15</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::Logger_CrtpOverloading_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_CrtpOverloading_Test@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>7</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>16</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::Logger_CrtpOverloading_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_CrtpOverloading_Test@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>7</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>17</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::Logger_CrtpOverloading_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_CrtpOverloading_Test@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>7</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>18</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::Logger_CrtpOverloading_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_CrtpOverloading_Test@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>7</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>19</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::Logger_CrtpOverloading_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_CrtpOverloading_Test@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>7</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>7</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'StaticLogger::Logger_CrtpOverloading_Test::TestBody' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>StaticLogger::Logger_CrtpOverloading_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_CrtpOverloading_Test@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>7</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>11</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::Logger_CrtpOverloading_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_CrtpOverloading_Test@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>7</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>12</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::Logger_CrtpOverloading_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_CrtpOverloading_Test@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>7</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>15</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::Logger_CrtpOverloading_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_CrtpOverloading_Test@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>7</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>16</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::Logger_CrtpOverloading_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_CrtpOverloading_Test@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>7</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>17</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::Logger_CrtpOverloading_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_CrtpOverloading_Test@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>7</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>18</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::Logger_CrtpOverloading_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_CrtpOverloading_Test@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>7</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>19</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::Logger_CrtpOverloading_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_CrtpOverloading_Test@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>7</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>33</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_WriteMsgs_Test::{ctor}</FUNCTION>
    <DECORATED>??0Logger_WriteMsgs_Test@LoggerFunctionCalling@StaticLogger@@QEAA@XZ</DECORATED>
    <FUNCLINE>33</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>33</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26426</DEFECTCODE>
    <DESCRIPTION>Global initializer calls a non-constexpr function 'operator new' (i.22).</DESCRIPTION>
    <FUNCTION>`dynamic initializer for 'StaticLogger::LoggerFunctionCalling::Logger_WriteMsgs_Test::test_info_''</FUNCTION>
    <DECORATED>??__E?test_info_@Logger_WriteMsgs_Test@LoggerFunctionCalling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ</DECORATED>
    <FUNCLINE>33</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>33</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>37</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_WriteMsgs_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_WriteMsgs_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>33</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>33</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'StaticLogger::LoggerFunctionCalling::Logger_WriteMsgs_Test::TestBody' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_WriteMsgs_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_WriteMsgs_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>33</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>37</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_WriteMsgs_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_WriteMsgs_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>33</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>40</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_WriteVars_Test::{ctor}</FUNCTION>
    <DECORATED>??0Logger_WriteVars_Test@LoggerFunctionCalling@StaticLogger@@QEAA@XZ</DECORATED>
    <FUNCLINE>40</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>40</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26426</DEFECTCODE>
    <DESCRIPTION>Global initializer calls a non-constexpr function 'operator new' (i.22).</DESCRIPTION>
    <FUNCTION>`dynamic initializer for 'StaticLogger::LoggerFunctionCalling::Logger_WriteVars_Test::test_info_''</FUNCTION>
    <DECORATED>??__E?test_info_@Logger_WriteVars_Test@LoggerFunctionCalling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ</DECORATED>
    <FUNCLINE>40</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>40</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>45</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_WriteVars_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_WriteVars_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>40</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>40</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'StaticLogger::LoggerFunctionCalling::Logger_WriteVars_Test::TestBody' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_WriteVars_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_WriteVars_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>40</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>45</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_WriteVars_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_WriteVars_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>40</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>48</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_AppendSource_Test::{ctor}</FUNCTION>
    <DECORATED>??0Logger_AppendSource_Test@LoggerFunctionCalling@StaticLogger@@QEAA@XZ</DECORATED>
    <FUNCLINE>48</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>48</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26426</DEFECTCODE>
    <DESCRIPTION>Global initializer calls a non-constexpr function 'operator new' (i.22).</DESCRIPTION>
    <FUNCTION>`dynamic initializer for 'StaticLogger::LoggerFunctionCalling::Logger_AppendSource_Test::test_info_''</FUNCTION>
    <DECORATED>??__E?test_info_@Logger_AppendSource_Test@LoggerFunctionCalling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ</DECORATED>
    <FUNCLINE>48</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>48</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>56</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_AppendSource_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_AppendSource_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>48</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>57</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_AppendSource_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_AppendSource_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>48</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>58</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_AppendSource_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_AppendSource_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>48</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>53</LINE>
      <COLUMN>7</COLUMN>
    </SFA>
    <DEFECTCODE>26496</DEFECTCODE>
    <DESCRIPTION>The variable 'lineNum' is assigned only once, mark it as const (con.4).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_AppendSource_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_AppendSource_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>48</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>48</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'StaticLogger::LoggerFunctionCalling::Logger_AppendSource_Test::TestBody' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_AppendSource_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_AppendSource_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>48</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>56</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_AppendSource_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_AppendSource_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>48</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>57</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_AppendSource_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_AppendSource_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>48</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>58</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_AppendSource_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_AppendSource_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>48</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>61</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_AppendTags_Test::{ctor}</FUNCTION>
    <DECORATED>??0Logger_AppendTags_Test@LoggerFunctionCalling@StaticLogger@@QEAA@XZ</DECORATED>
    <FUNCLINE>61</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>61</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26426</DEFECTCODE>
    <DESCRIPTION>Global initializer calls a non-constexpr function 'operator new' (i.22).</DESCRIPTION>
    <FUNCTION>`dynamic initializer for 'StaticLogger::LoggerFunctionCalling::Logger_AppendTags_Test::test_info_''</FUNCTION>
    <DECORATED>??__E?test_info_@Logger_AppendTags_Test@LoggerFunctionCalling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ</DECORATED>
    <FUNCLINE>61</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>61</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>66</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_AppendTags_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_AppendTags_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>61</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>61</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'StaticLogger::LoggerFunctionCalling::Logger_AppendTags_Test::TestBody' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_AppendTags_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_AppendTags_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>61</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>66</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_AppendTags_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_AppendTags_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>61</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>69</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_OpenStream_Test::{ctor}</FUNCTION>
    <DECORATED>??0Logger_OpenStream_Test@LoggerFunctionCalling@StaticLogger@@QEAA@XZ</DECORATED>
    <FUNCLINE>69</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>69</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26426</DEFECTCODE>
    <DESCRIPTION>Global initializer calls a non-constexpr function 'operator new' (i.22).</DESCRIPTION>
    <FUNCTION>`dynamic initializer for 'StaticLogger::LoggerFunctionCalling::Logger_OpenStream_Test::test_info_''</FUNCTION>
    <DECORATED>??__E?test_info_@Logger_OpenStream_Test@LoggerFunctionCalling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ</DECORATED>
    <FUNCLINE>69</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>69</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>73</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_OpenStream_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_OpenStream_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>69</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>75</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_OpenStream_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_OpenStream_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>69</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>76</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_OpenStream_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_OpenStream_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>69</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>69</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'StaticLogger::LoggerFunctionCalling::Logger_OpenStream_Test::TestBody' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_OpenStream_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_OpenStream_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>69</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>73</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_OpenStream_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_OpenStream_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>69</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>75</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_OpenStream_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_OpenStream_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>69</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>76</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_OpenStream_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_OpenStream_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>69</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>79</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_CloseStream_Test::{ctor}</FUNCTION>
    <DECORATED>??0Logger_CloseStream_Test@LoggerFunctionCalling@StaticLogger@@QEAA@XZ</DECORATED>
    <FUNCLINE>79</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>79</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26426</DEFECTCODE>
    <DESCRIPTION>Global initializer calls a non-constexpr function 'operator new' (i.22).</DESCRIPTION>
    <FUNCTION>`dynamic initializer for 'StaticLogger::LoggerFunctionCalling::Logger_CloseStream_Test::test_info_''</FUNCTION>
    <DECORATED>??__E?test_info_@Logger_CloseStream_Test@LoggerFunctionCalling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ</DECORATED>
    <FUNCLINE>79</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>79</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>83</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_CloseStream_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_CloseStream_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>79</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>85</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_CloseStream_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_CloseStream_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>79</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>86</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_CloseStream_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_CloseStream_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>79</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>79</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'StaticLogger::LoggerFunctionCalling::Logger_CloseStream_Test::TestBody' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_CloseStream_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_CloseStream_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>79</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>83</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_CloseStream_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_CloseStream_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>79</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>85</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_CloseStream_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_CloseStream_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>79</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>86</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_CloseStream_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_CloseStream_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>79</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>89</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_IsStreamOpen_Test::{ctor}</FUNCTION>
    <DECORATED>??0Logger_IsStreamOpen_Test@LoggerFunctionCalling@StaticLogger@@QEAA@XZ</DECORATED>
    <FUNCLINE>89</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>89</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26426</DEFECTCODE>
    <DESCRIPTION>Global initializer calls a non-constexpr function 'operator new' (i.22).</DESCRIPTION>
    <FUNCTION>`dynamic initializer for 'StaticLogger::LoggerFunctionCalling::Logger_IsStreamOpen_Test::test_info_''</FUNCTION>
    <DECORATED>??__E?test_info_@Logger_IsStreamOpen_Test@LoggerFunctionCalling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ</DECORATED>
    <FUNCLINE>89</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>89</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>94</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_IsStreamOpen_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_IsStreamOpen_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>89</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>95</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_IsStreamOpen_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_IsStreamOpen_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>89</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>98</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_IsStreamOpen_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_IsStreamOpen_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>89</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>100</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_IsStreamOpen_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_IsStreamOpen_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>89</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>89</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'StaticLogger::LoggerFunctionCalling::Logger_IsStreamOpen_Test::TestBody' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_IsStreamOpen_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_IsStreamOpen_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>89</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>94</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_IsStreamOpen_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_IsStreamOpen_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>89</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>95</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_IsStreamOpen_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_IsStreamOpen_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>89</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>98</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_IsStreamOpen_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_IsStreamOpen_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>89</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>100</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_IsStreamOpen_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_IsStreamOpen_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>89</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>103</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_FlushStream_Test::{ctor}</FUNCTION>
    <DECORATED>??0Logger_FlushStream_Test@LoggerFunctionCalling@StaticLogger@@QEAA@XZ</DECORATED>
    <FUNCLINE>103</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>103</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26426</DEFECTCODE>
    <DESCRIPTION>Global initializer calls a non-constexpr function 'operator new' (i.22).</DESCRIPTION>
    <FUNCTION>`dynamic initializer for 'StaticLogger::LoggerFunctionCalling::Logger_FlushStream_Test::test_info_''</FUNCTION>
    <DECORATED>??__E?test_info_@Logger_FlushStream_Test@LoggerFunctionCalling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ</DECORATED>
    <FUNCLINE>103</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>103</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>107</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_FlushStream_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_FlushStream_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>103</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>103</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'StaticLogger::LoggerFunctionCalling::Logger_FlushStream_Test::TestBody' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_FlushStream_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_FlushStream_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>103</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>107</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_FlushStream_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_FlushStream_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>103</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>110</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_OnConstruction_Test::{ctor}</FUNCTION>
    <DECORATED>??0Logger_OnConstruction_Test@LoggerFunctionCalling@StaticLogger@@QEAA@XZ</DECORATED>
    <FUNCLINE>110</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>110</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26426</DEFECTCODE>
    <DESCRIPTION>Global initializer calls a non-constexpr function 'operator new' (i.22).</DESCRIPTION>
    <FUNCTION>`dynamic initializer for 'StaticLogger::LoggerFunctionCalling::Logger_OnConstruction_Test::test_info_''</FUNCTION>
    <DECORATED>??__E?test_info_@Logger_OnConstruction_Test@LoggerFunctionCalling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ</DECORATED>
    <FUNCLINE>110</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>110</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>114</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_OnConstruction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_OnConstruction_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>110</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>110</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'StaticLogger::LoggerFunctionCalling::Logger_OnConstruction_Test::TestBody' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_OnConstruction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_OnConstruction_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>110</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>114</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_OnConstruction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_OnConstruction_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>110</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>117</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_OnDestruction_Test::{ctor}</FUNCTION>
    <DECORATED>??0Logger_OnDestruction_Test@LoggerFunctionCalling@StaticLogger@@QEAA@XZ</DECORATED>
    <FUNCLINE>117</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>117</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26426</DEFECTCODE>
    <DESCRIPTION>Global initializer calls a non-constexpr function 'operator new' (i.22).</DESCRIPTION>
    <FUNCTION>`dynamic initializer for 'StaticLogger::LoggerFunctionCalling::Logger_OnDestruction_Test::test_info_''</FUNCTION>
    <DECORATED>??__E?test_info_@Logger_OnDestruction_Test@LoggerFunctionCalling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ</DECORATED>
    <FUNCLINE>117</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>117</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>126</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_OnDestruction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_OnDestruction_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>117</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>117</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'StaticLogger::LoggerFunctionCalling::Logger_OnDestruction_Test::TestBody' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_OnDestruction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_OnDestruction_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>117</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>126</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerFunctionCalling::Logger_OnDestruction_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_OnDestruction_Test@LoggerFunctionCalling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>117</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>134</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_IsLevelInRange_Test::{ctor}</FUNCTION>
    <DECORATED>??0Logger_IsLevelInRange_Test@LoggerLogEnabling@StaticLogger@@QEAA@XZ</DECORATED>
    <FUNCLINE>134</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>134</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26426</DEFECTCODE>
    <DESCRIPTION>Global initializer calls a non-constexpr function 'operator new' (i.22).</DESCRIPTION>
    <FUNCTION>`dynamic initializer for 'StaticLogger::LoggerLogEnabling::Logger_IsLevelInRange_Test::test_info_''</FUNCTION>
    <DECORATED>??__E?test_info_@Logger_IsLevelInRange_Test@LoggerLogEnabling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ</DECORATED>
    <FUNCLINE>134</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>134</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>137</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_IsLevelInRange_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_IsLevelInRange_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>134</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>138</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_IsLevelInRange_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_IsLevelInRange_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>134</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>139</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_IsLevelInRange_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_IsLevelInRange_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>134</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>134</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'StaticLogger::LoggerLogEnabling::Logger_IsLevelInRange_Test::TestBody' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_IsLevelInRange_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_IsLevelInRange_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>134</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>137</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_IsLevelInRange_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_IsLevelInRange_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>134</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>138</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_IsLevelInRange_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_IsLevelInRange_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>134</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>139</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_IsLevelInRange_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_IsLevelInRange_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>134</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>141</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_IsLogEnabled_Test::{ctor}</FUNCTION>
    <DECORATED>??0Logger_IsLogEnabled_Test@LoggerLogEnabling@StaticLogger@@QEAA@XZ</DECORATED>
    <FUNCLINE>141</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>141</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26426</DEFECTCODE>
    <DESCRIPTION>Global initializer calls a non-constexpr function 'operator new' (i.22).</DESCRIPTION>
    <FUNCTION>`dynamic initializer for 'StaticLogger::LoggerLogEnabling::Logger_IsLogEnabled_Test::test_info_''</FUNCTION>
    <DECORATED>??__E?test_info_@Logger_IsLogEnabled_Test@LoggerLogEnabling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ</DECORATED>
    <FUNCLINE>141</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>141</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>144</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_IsLogEnabled_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_IsLogEnabled_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>141</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>146</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_IsLogEnabled_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_IsLogEnabled_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>141</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>141</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'StaticLogger::LoggerLogEnabling::Logger_IsLogEnabled_Test::TestBody' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_IsLogEnabled_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_IsLogEnabled_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>141</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>144</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_IsLogEnabled_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_IsLogEnabled_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>141</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>146</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_IsLogEnabled_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_IsLogEnabled_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>141</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>148</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_DoLog_Test::{ctor}</FUNCTION>
    <DECORATED>??0Logger_DoLog_Test@LoggerLogEnabling@StaticLogger@@QEAA@XZ</DECORATED>
    <FUNCLINE>148</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>148</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26426</DEFECTCODE>
    <DESCRIPTION>Global initializer calls a non-constexpr function 'operator new' (i.22).</DESCRIPTION>
    <FUNCTION>`dynamic initializer for 'StaticLogger::LoggerLogEnabling::Logger_DoLog_Test::test_info_''</FUNCTION>
    <DECORATED>??__E?test_info_@Logger_DoLog_Test@LoggerLogEnabling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ</DECORATED>
    <FUNCLINE>148</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>148</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>151</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_DoLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLog_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>148</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>153</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_DoLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLog_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>148</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>155</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_DoLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLog_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>148</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>148</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'StaticLogger::LoggerLogEnabling::Logger_DoLog_Test::TestBody' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_DoLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLog_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>148</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>151</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_DoLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLog_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>148</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>153</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_DoLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLog_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>148</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>155</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_DoLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DoLog_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>148</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>157</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_EnableLog_Test::{ctor}</FUNCTION>
    <DECORATED>??0Logger_EnableLog_Test@LoggerLogEnabling@StaticLogger@@QEAA@XZ</DECORATED>
    <FUNCLINE>157</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>157</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26426</DEFECTCODE>
    <DESCRIPTION>Global initializer calls a non-constexpr function 'operator new' (i.22).</DESCRIPTION>
    <FUNCTION>`dynamic initializer for 'StaticLogger::LoggerLogEnabling::Logger_EnableLog_Test::test_info_''</FUNCTION>
    <DECORATED>??__E?test_info_@Logger_EnableLog_Test@LoggerLogEnabling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ</DECORATED>
    <FUNCLINE>157</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>157</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>160</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_EnableLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_EnableLog_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>157</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>162</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_EnableLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_EnableLog_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>157</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>164</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_EnableLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_EnableLog_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>157</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>166</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_EnableLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_EnableLog_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>157</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>157</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'StaticLogger::LoggerLogEnabling::Logger_EnableLog_Test::TestBody' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_EnableLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_EnableLog_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>157</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>160</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_EnableLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_EnableLog_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>157</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>162</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_EnableLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_EnableLog_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>157</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>164</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_EnableLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_EnableLog_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>157</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>166</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_EnableLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_EnableLog_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>157</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>168</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_DisableLog_Test::{ctor}</FUNCTION>
    <DECORATED>??0Logger_DisableLog_Test@LoggerLogEnabling@StaticLogger@@QEAA@XZ</DECORATED>
    <FUNCLINE>168</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>168</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26426</DEFECTCODE>
    <DESCRIPTION>Global initializer calls a non-constexpr function 'operator new' (i.22).</DESCRIPTION>
    <FUNCTION>`dynamic initializer for 'StaticLogger::LoggerLogEnabling::Logger_DisableLog_Test::test_info_''</FUNCTION>
    <DECORATED>??__E?test_info_@Logger_DisableLog_Test@LoggerLogEnabling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ</DECORATED>
    <FUNCLINE>168</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>168</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>171</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_DisableLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DisableLog_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>168</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>173</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_DisableLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DisableLog_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>168</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>175</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_DisableLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DisableLog_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>168</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>168</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'StaticLogger::LoggerLogEnabling::Logger_DisableLog_Test::TestBody' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_DisableLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DisableLog_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>168</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>171</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_DisableLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DisableLog_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>168</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>173</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_DisableLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DisableLog_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>168</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>175</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_DisableLog_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_DisableLog_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>168</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>178</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::{ctor}</FUNCTION>
    <DECORATED>??0Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@QEAA@XZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>178</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26426</DEFECTCODE>
    <DESCRIPTION>Global initializer calls a non-constexpr function 'operator new' (i.22).</DESCRIPTION>
    <FUNCTION>`dynamic initializer for 'StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::test_info_''</FUNCTION>
    <DECORATED>??__E?test_info_@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>178</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>184</LINE>
      <COLUMN>4</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>189</LINE>
      <COLUMN>4</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>194</LINE>
      <COLUMN>4</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>200</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>201</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>202</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>205</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>206</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>207</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>211</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>212</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>213</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>218</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>219</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>220</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>223</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>225</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>226</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>227</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>178</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>184</LINE>
      <COLUMN>4</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>189</LINE>
      <COLUMN>4</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>194</LINE>
      <COLUMN>4</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>200</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>201</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>202</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>205</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>206</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>207</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>211</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>212</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>213</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>218</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>219</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>220</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>223</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>225</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>226</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>227</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelArgument_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelArgument_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>229</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::{ctor}</FUNCTION>
    <DECORATED>??0Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@QEAA@XZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>229</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26426</DEFECTCODE>
    <DESCRIPTION>Global initializer calls a non-constexpr function 'operator new' (i.22).</DESCRIPTION>
    <FUNCTION>`dynamic initializer for 'StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::test_info_''</FUNCTION>
    <DECORATED>??__E?test_info_@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@0QEAVTestInfo@testing@@EA@@YAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>229</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>234</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>235</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>236</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>237</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>238</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>240</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>244</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>245</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>246</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>247</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>248</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>250</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>254</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>255</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>256</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>257</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>258</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>260</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>266</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>267</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>268</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>271</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>272</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>273</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>277</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>278</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>279</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>285</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>286</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>287</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>229</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>234</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>235</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>236</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>237</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>238</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>240</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>244</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>245</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>246</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>247</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>248</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>250</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>254</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>255</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>256</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>257</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>258</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>260</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>266</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>267</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>268</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>271</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>272</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>273</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>277</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>278</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>279</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>285</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>286</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\</FILEPATH>
      <FILENAME>StaticLog.cpp</FILENAME>
      <LINE>287</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>StaticLogger::LoggerLogEnabling::Logger_LogLevels_LevelTemplate_Test::TestBody</FUNCTION>
    <DECORATED>?TestBody@Logger_LogLevels_LevelTemplate_Test@LoggerLogEnabling@StaticLogger@@EEAAXXZ</DECORATED>
    <FUNCLINE>229</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>StaticLog.h</FILENAME>
      <LINE>112</LINE>
      <COLUMN>13</COLUMN>
    </SFA>
    <DEFECTCODE>26432</DEFECTCODE>
    <DESCRIPTION>If you define or delete any default operation in the type 'class StaticLogger::Logger&lt;struct StaticLogger::StaticLogTesting::TestingLogger2,struct StaticLogger::StaticLogTesting::TestingDataPackage2&gt;', define or delete them all (c.21).</DESCRIPTION>
    <FUNCTION>StaticLogger::Logger&lt;StaticLogger::StaticLogTesting::TestingLogger2,StaticLogger::StaticLogTesting::TestingDataPackage2&gt;::{dtor}</FUNCTION>
    <DECORATED>??1?$Logger@UTestingLogger2@StaticLogTesting@StaticLogger@@UTestingDataPackage2@23@@StaticLogger@@QEAA@XZ</DECORATED>
    <FUNCLINE>112</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>StaticLog.h</FILENAME>
      <LINE>114</LINE>
      <COLUMN>16</COLUMN>
    </SFA>
    <DEFECTCODE>26447</DEFECTCODE>
    <DESCRIPTION>The function is declared 'noexcept' but calls function 'GetWriter()' which may throw exceptions (f.6).</DESCRIPTION>
    <FUNCTION>StaticLogger::Logger&lt;StaticLogger::StaticLogTesting::TestingLogger2,StaticLogger::StaticLogTesting::TestingDataPackage2&gt;::{dtor}</FUNCTION>
    <DECORATED>??1?$Logger@UTestingLogger2@StaticLogTesting@StaticLogger@@UTestingDataPackage2@23@@StaticLogger@@QEAA@XZ</DECORATED>
    <FUNCLINE>112</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>StaticLog.h</FILENAME>
      <LINE>114</LINE>
      <COLUMN>41</COLUMN>
    </SFA>
    <DEFECTCODE>26447</DEFECTCODE>
    <DESCRIPTION>The function is declared 'noexcept' but calls function 'OnDestruction()' which may throw exceptions (f.6).</DESCRIPTION>
    <FUNCTION>StaticLogger::Logger&lt;StaticLogger::StaticLogTesting::TestingLogger2,StaticLogger::StaticLogTesting::TestingDataPackage2&gt;::{dtor}</FUNCTION>
    <DECORATED>??1?$Logger@UTestingLogger2@StaticLogTesting@StaticLogger@@UTestingDataPackage2@23@@StaticLogger@@QEAA@XZ</DECORATED>
    <FUNCLINE>112</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>StaticLog.h</FILENAME>
      <LINE>107</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>StaticLogger::Logger&lt;StaticLogger::StaticLogTesting::TestingLogger2,StaticLogger::StaticLogTesting::TestingDataPackage2&gt;::{ctor}</FUNCTION>
    <DECORATED>??0?$Logger@UTestingLogger2@StaticLogTesting@StaticLogger@@UTestingDataPackage2@23@@StaticLogger@@QEAA@XZ</DECORATED>
    <FUNCLINE>107</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>StaticLog.h</FILENAME>
      <LINE>222</LINE>
      <COLUMN>24</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'StaticLogger::Logger&lt;StaticLogger::StaticLogTesting::TestingLogger1,StaticLogger::StaticLogTesting::TestingDataPackage1&gt;::IsLogEnabled' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>StaticLogger::Logger&lt;StaticLogger::StaticLogTesting::TestingLogger1,StaticLogger::StaticLogTesting::TestingDataPackage1&gt;::IsLogEnabled</FUNCTION>
    <DECORATED>?IsLogEnabled@?$Logger@UTestingLogger1@StaticLogTesting@StaticLogger@@UTestingDataPackage1@23@@StaticLogger@@QEBA_NXZ</DECORATED>
    <FUNCLINE>222</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>StaticLog.h</FILENAME>
      <LINE>184</LINE>
      <COLUMN>24</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'StaticLogger::Logger&lt;StaticLogger::StaticLogTesting::TestingLogger1,StaticLogger::StaticLogTesting::TestingDataPackage1&gt;::DoLog' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>StaticLogger::Logger&lt;StaticLogger::StaticLogTesting::TestingLogger1,StaticLogger::StaticLogTesting::TestingDataPackage1&gt;::DoLog</FUNCTION>
    <DECORATED>?DoLog@?$Logger@UTestingLogger1@StaticLogTesting@StaticLogger@@UTestingDataPackage1@23@@StaticLogger@@QEAAX_N@Z</DECORATED>
    <FUNCLINE>184</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>StaticLog.h</FILENAME>
      <LINE>104</LINE>
      <COLUMN>24</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'StaticLogger::Logger&lt;StaticLogger::StaticLogTesting::TestingLogger2,StaticLogger::StaticLogTesting::TestingDataPackage2&gt;::GetWriter' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>StaticLogger::Logger&lt;StaticLogger::StaticLogTesting::TestingLogger2,StaticLogger::StaticLogTesting::TestingDataPackage2&gt;::GetWriter</FUNCTION>
    <DECORATED>?GetWriter@?$Logger@UTestingLogger2@StaticLogTesting@StaticLogger@@UTestingDataPackage2@23@@StaticLogger@@QEAAAEAUTestingLogger2@StaticLogTesting@2@XZ</DECORATED>
    <FUNCLINE>104</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>StaticLog.h</FILENAME>
      <LINE>255</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26482</DEFECTCODE>
    <DESCRIPTION>Only index into arrays using constant expressions (bounds.2).</DESCRIPTION>
    <FUNCTION>StaticLogger::Logger&lt;StaticLogger::StaticLogTesting::TestingLogger1,StaticLogger::StaticLogTesting::TestingDataPackage1&gt;::IsLogEnabledInternal</FUNCTION>
    <DECORATED>?IsLogEnabledInternal@?$Logger@UTestingLogger1@StaticLogTesting@StaticLogger@@UTestingDataPackage1@23@@StaticLogger@@AEBA_NI@Z</DECORATED>
    <FUNCLINE>252</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>StaticLog.h</FILENAME>
      <LINE>255</LINE>
      <COLUMN>51</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>StaticLogger::Logger&lt;StaticLogger::StaticLogTesting::TestingLogger1,StaticLogger::StaticLogTesting::TestingDataPackage1&gt;::IsLogEnabledInternal</FUNCTION>
    <DECORATED>?IsLogEnabledInternal@?$Logger@UTestingLogger1@StaticLogTesting@StaticLogger@@UTestingDataPackage1@23@@StaticLogger@@AEBA_NI@Z</DECORATED>
    <FUNCLINE>252</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>StaticLog.h</FILENAME>
      <LINE>235</LINE>
      <COLUMN>16</COLUMN>
    </SFA>
    <DEFECTCODE>26493</DEFECTCODE>
    <DESCRIPTION>Don't use C-style casts (type.4).</DESCRIPTION>
    <FUNCTION>StaticLogger::Logger&lt;StaticLogger::StaticLogTesting::TestingLogger1,StaticLogger::StaticLogTesting::TestingDataPackage1&gt;::IsLogEnabled</FUNCTION>
    <DECORATED>??$IsLogEnabled@$0A@@?$Logger@UTestingLogger1@StaticLogTesting@StaticLogger@@UTestingDataPackage1@23@@StaticLogger@@QEBA_NXZ</DECORATED>
    <FUNCLINE>232</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>StaticLog.h</FILENAME>
      <LINE>202</LINE>
      <COLUMN>16</COLUMN>
    </SFA>
    <DEFECTCODE>26493</DEFECTCODE>
    <DESCRIPTION>Don't use C-style casts (type.4).</DESCRIPTION>
    <FUNCTION>StaticLogger::Logger&lt;StaticLogger::StaticLogTesting::TestingLogger1,StaticLogger::StaticLogTesting::TestingDataPackage1&gt;::DoLoggingLevels</FUNCTION>
    <DECORATED>??$DoLoggingLevels@$0A@$01$02$02@?$Logger@UTestingLogger1@StaticLogTesting@StaticLogger@@UTestingDataPackage1@23@@StaticLogger@@QEAAX_N@Z</DECORATED>
    <FUNCLINE>198</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>G_MemoryFunctions.h</FILENAME>
      <LINE>15</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26473</DEFECTCODE>
    <DESCRIPTION>Don't cast between pointer types where the source type and the target type are the same (type.1).</DESCRIPTION>
    <FUNCTION>SetMemory</FUNCTION>
    <DECORATED>??$SetMemory@PEAX$0A@@@YAXPEAX_KH@Z</DECORATED>
    <FUNCLINE>13</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>G_MemoryFunctions.h</FILENAME>
      <LINE>13</LINE>
      <COLUMN>0</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'SetMemory&lt;void * __ptr64,0&gt;' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>SetMemory</FUNCTION>
    <DECORATED>??$SetMemory@PEAX$0A@@@YAXPEAX_KH@Z</DECORATED>
    <FUNCLINE>13</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>StaticLog.h</FILENAME>
      <LINE>262</LINE>
      <COLUMN>48</COLUMN>
    </SFA>
    <DEFECTCODE>26482</DEFECTCODE>
    <DESCRIPTION>Only index into arrays using constant expressions (bounds.2).</DESCRIPTION>
    <FUNCTION>StaticLogger::Logger&lt;StaticLogger::StaticLogTesting::TestingLogger1,StaticLogger::StaticLogTesting::TestingDataPackage1&gt;::DoLoggingLevelInternal</FUNCTION>
    <DECORATED>?DoLoggingLevelInternal@?$Logger@UTestingLogger1@StaticLogTesting@StaticLogger@@UTestingDataPackage1@23@@StaticLogger@@AEAAXI_N@Z</DECORATED>
    <FUNCLINE>260</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>StaticLog.h</FILENAME>
      <LINE>262</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>StaticLogger::Logger&lt;StaticLogger::StaticLogTesting::TestingLogger1,StaticLogger::StaticLogTesting::TestingDataPackage1&gt;::DoLoggingLevelInternal</FUNCTION>
    <DECORATED>?DoLoggingLevelInternal@?$Logger@UTestingLogger1@StaticLogTesting@StaticLogger@@UTestingDataPackage1@23@@StaticLogger@@AEAAXI_N@Z</DECORATED>
    <FUNCLINE>260</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>StaticLog.h</FILENAME>
      <LINE>260</LINE>
      <COLUMN>24</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'StaticLogger::Logger&lt;StaticLogger::StaticLogTesting::TestingLogger1,StaticLogger::StaticLogTesting::TestingDataPackage1&gt;::DoLoggingLevelInternal' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>StaticLogger::Logger&lt;StaticLogger::StaticLogTesting::TestingLogger1,StaticLogger::StaticLogTesting::TestingDataPackage1&gt;::DoLoggingLevelInternal</FUNCTION>
    <DECORATED>?DoLoggingLevelInternal@?$Logger@UTestingLogger1@StaticLogTesting@StaticLogger@@UTestingDataPackage1@23@@StaticLogger@@AEAAXI_N@Z</DECORATED>
    <FUNCLINE>260</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>StaticLog.h</FILENAME>
      <LINE>299</LINE>
      <COLUMN>24</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'StaticLogger::Logger&lt;StaticLogger::StaticLogTesting::TestingLogger1,StaticLogger::StaticLogTesting::TestingDataPackage1&gt;::UnravelAndCheckLevel_Throw' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>StaticLogger::Logger&lt;StaticLogger::StaticLogTesting::TestingLogger1,StaticLogger::StaticLogTesting::TestingDataPackage1&gt;::UnravelAndCheckLevel_Throw</FUNCTION>
    <DECORATED>?UnravelAndCheckLevel_Throw@?$Logger@UTestingLogger1@StaticLogTesting@StaticLogger@@UTestingDataPackage1@23@@StaticLogger@@AEAAXXZ</DECORATED>
    <FUNCLINE>299</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>StaticLog.h</FILENAME>
      <LINE>281</LINE>
      <COLUMN>24</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'StaticLogger::Logger&lt;StaticLogger::StaticLogTesting::TestingLogger1,StaticLogger::StaticLogTesting::TestingDataPackage1&gt;::UnravelAndSetLoggingLevel' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>StaticLogger::Logger&lt;StaticLogger::StaticLogTesting::TestingLogger1,StaticLogger::StaticLogTesting::TestingDataPackage1&gt;::UnravelAndSetLoggingLevel</FUNCTION>
    <DECORATED>?UnravelAndSetLoggingLevel@?$Logger@UTestingLogger1@StaticLogTesting@StaticLogger@@UTestingDataPackage1@23@@StaticLogger@@AEAAX_N@Z</DECORATED>
    <FUNCLINE>281</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GClasses\Common\</FILEPATH>
      <FILENAME>StaticLog.h</FILENAME>
      <LINE>273</LINE>
      <COLUMN>0</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'StaticLogger::Logger&lt;StaticLogger::StaticLogTesting::TestingLogger1,StaticLogger::StaticLogTesting::TestingDataPackage1&gt;::UnravelAndSetLoggingLevel&lt;1&gt;' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>StaticLogger::Logger&lt;StaticLogger::StaticLogTesting::TestingLogger1,StaticLogger::StaticLogTesting::TestingDataPackage1&gt;::UnravelAndSetLoggingLevel</FUNCTION>
    <DECORATED>??$UnravelAndSetLoggingLevel@$00@?$Logger@UTestingLogger1@StaticLogTesting@StaticLogger@@UTestingDataPackage1@23@@StaticLogger@@AEAAX_N@Z</DECORATED>
    <FUNCLINE>273</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest-printers.h</FILENAME>
      <LINE>260</LINE>
      <COLUMN>0</COLUMN>
    </SFA>
    <DEFECTCODE>26429</DEFECTCODE>
    <DESCRIPTION>Symbol 'os' is never tested for nullness, it can be marked as not_null (f.23).</DESCRIPTION>
    <FUNCTION>testing_internal::DefaultPrintNonContainerTo</FUNCTION>
    <DECORATED>??$DefaultPrintNonContainerTo@I@testing_internal@@YAXAEBIPEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z</DECORATED>
    <FUNCLINE>260</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>1245</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26432</DEFECTCODE>
    <DESCRIPTION>If you define or delete any default operation in the type 'class testing::internal::RE', define or delete them all (c.21).</DESCRIPTION>
    <FUNCTION>testing::internal::RE::{ctor}</FUNCTION>
    <DECORATED>??0RE@internal@testing@@QEAA@AEBV012@@Z</DECORATED>
    <FUNCLINE>1245</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>1260</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::RE::pattern' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::RE::pattern</FUNCTION>
    <DECORATED>?pattern@RE@internal@testing@@QEBAPEBDXZ</DECORATED>
    <FUNCLINE>1260</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>1348</LINE>
      <COLUMN>18</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::GTestLog::GetStream' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::GTestLog::GetStream</FUNCTION>
    <DECORATED>?GetStream@GTestLog@internal@testing@@QEAAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@XZ</DECORATED>
    <FUNCLINE>1348</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>1362</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::LogToStderr' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::LogToStderr</FUNCTION>
    <DECORATED>?LogToStderr@internal@testing@@YAXXZ</DECORATED>
    <FUNCLINE>1362</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>1363</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::FlushInfoLog' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::FlushInfoLog</FUNCTION>
    <DECORATED>?FlushInfoLog@internal@testing@@YAXXZ</DECORATED>
    <FUNCLINE>1363</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>1804</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'testing::internal::Mutex::type_' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>testing::internal::Mutex::{ctor}</FUNCTION>
    <DECORATED>??0Mutex@internal@testing@@QEAA@W4StaticConstructorSelector@012@@Z</DECORATED>
    <FUNCLINE>1804</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>testing::internal::Mutex::type_</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>1804</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::Mutex::Mutex' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::Mutex::{ctor}</FUNCTION>
    <DECORATED>??0Mutex@internal@testing@@QEAA@W4StaticConstructorSelector@012@@Z</DECORATED>
    <FUNCLINE>1804</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>1804</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26812</DEFECTCODE>
    <DESCRIPTION>The enum type 'testing::internal::Mutex::StaticConstructorSelector' is unscoped. Prefer 'enum class' over 'enum' (Enum.3).</DESCRIPTION>
    <FUNCTION>testing::internal::Mutex::{ctor}</FUNCTION>
    <DECORATED>??0Mutex@internal@testing@@QEAA@W4StaticConstructorSelector@012@@Z</DECORATED>
    <FUNCLINE>1804</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>1850</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26432</DEFECTCODE>
    <DESCRIPTION>If you define or delete any default operation in the type 'class testing::internal::GTestMutexLock', define or delete them all (c.21).</DESCRIPTION>
    <FUNCTION>testing::internal::GTestMutexLock::{dtor}</FUNCTION>
    <DECORATED>??1GTestMutexLock@internal@testing@@QEAA@XZ</DECORATED>
    <FUNCLINE>1850</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>1850</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26447</DEFECTCODE>
    <DESCRIPTION>The function is declared 'noexcept' but calls function 'Unlock()' which may throw exceptions (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::GTestMutexLock::{dtor}</FUNCTION>
    <DECORATED>??1GTestMutexLock@internal@testing@@QEAA@XZ</DECORATED>
    <FUNCLINE>1850</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>1864</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26432</DEFECTCODE>
    <DESCRIPTION>If you define or delete any default operation in the type 'class testing::internal::ThreadLocalValueHolderBase', define or delete them all (c.21).</DESCRIPTION>
    <FUNCTION>testing::internal::ThreadLocalValueHolderBase::{dtor}</FUNCTION>
    <DECORATED>??1ThreadLocalValueHolderBase@internal@testing@@UEAA@XZ</DECORATED>
    <FUNCLINE>1864</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>1878</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::ThreadLocalBase::{ctor}</FUNCTION>
    <DECORATED>??0ThreadLocalBase@internal@testing@@IEAA@XZ</DECORATED>
    <FUNCLINE>1878</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>1879</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26432</DEFECTCODE>
    <DESCRIPTION>If you define or delete any default operation in the type 'class testing::internal::ThreadLocalBase', define or delete them all (c.21).</DESCRIPTION>
    <FUNCTION>testing::internal::ThreadLocalBase::{dtor}</FUNCTION>
    <DECORATED>??1ThreadLocalBase@internal@testing@@MEAA@XZ</DECORATED>
    <FUNCLINE>1879</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>1879</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26436</DEFECTCODE>
    <DESCRIPTION>The type 'class testing::internal::ThreadLocalBase' with a virtual function needs either public virtual or protected non-virtual destructor (c.35).</DESCRIPTION>
    <FUNCTION>testing::internal::ThreadLocalBase::{dtor}</FUNCTION>
    <DECORATED>??1ThreadLocalBase@internal@testing@@MEAA@XZ</DECORATED>
    <FUNCLINE>1879</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>1907</LINE>
      <COLUMN>13</COLUMN>
    </SFA>
    <DEFECTCODE>26432</DEFECTCODE>
    <DESCRIPTION>If you define or delete any default operation in the type 'class testing::internal::ThreadWithParamBase::Runnable', define or delete them all (c.21).</DESCRIPTION>
    <FUNCTION>testing::internal::ThreadWithParamBase::Runnable::{dtor}</FUNCTION>
    <DECORATED>??1Runnable@ThreadWithParamBase@internal@testing@@UEAA@XZ</DECORATED>
    <FUNCLINE>1907</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2399</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>26472</DEFECTCODE>
    <DESCRIPTION>Don't use a static_cast for arithmetic conversions. Use brace initialization, gsl::narrow_cast or gsl::narrow (type.1).</DESCRIPTION>
    <FUNCTION>testing::internal::IsAlpha</FUNCTION>
    <DECORATED>?IsAlpha@internal@testing@@YA_ND@Z</DECORATED>
    <FUNCLINE>2398</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2398</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::IsAlpha' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::IsAlpha</FUNCTION>
    <DECORATED>?IsAlpha@internal@testing@@YA_ND@Z</DECORATED>
    <FUNCLINE>2398</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2402</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>26472</DEFECTCODE>
    <DESCRIPTION>Don't use a static_cast for arithmetic conversions. Use brace initialization, gsl::narrow_cast or gsl::narrow (type.1).</DESCRIPTION>
    <FUNCTION>testing::internal::IsAlNum</FUNCTION>
    <DECORATED>?IsAlNum@internal@testing@@YA_ND@Z</DECORATED>
    <FUNCLINE>2401</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2401</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::IsAlNum' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::IsAlNum</FUNCTION>
    <DECORATED>?IsAlNum@internal@testing@@YA_ND@Z</DECORATED>
    <FUNCLINE>2401</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2405</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>26472</DEFECTCODE>
    <DESCRIPTION>Don't use a static_cast for arithmetic conversions. Use brace initialization, gsl::narrow_cast or gsl::narrow (type.1).</DESCRIPTION>
    <FUNCTION>testing::internal::IsDigit</FUNCTION>
    <DECORATED>?IsDigit@internal@testing@@YA_ND@Z</DECORATED>
    <FUNCLINE>2404</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2404</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::IsDigit' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::IsDigit</FUNCTION>
    <DECORATED>?IsDigit@internal@testing@@YA_ND@Z</DECORATED>
    <FUNCLINE>2404</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2408</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>26472</DEFECTCODE>
    <DESCRIPTION>Don't use a static_cast for arithmetic conversions. Use brace initialization, gsl::narrow_cast or gsl::narrow (type.1).</DESCRIPTION>
    <FUNCTION>testing::internal::IsLower</FUNCTION>
    <DECORATED>?IsLower@internal@testing@@YA_ND@Z</DECORATED>
    <FUNCLINE>2407</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2407</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::IsLower' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::IsLower</FUNCTION>
    <DECORATED>?IsLower@internal@testing@@YA_ND@Z</DECORATED>
    <FUNCLINE>2407</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2411</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>26472</DEFECTCODE>
    <DESCRIPTION>Don't use a static_cast for arithmetic conversions. Use brace initialization, gsl::narrow_cast or gsl::narrow (type.1).</DESCRIPTION>
    <FUNCTION>testing::internal::IsSpace</FUNCTION>
    <DECORATED>?IsSpace@internal@testing@@YA_ND@Z</DECORATED>
    <FUNCLINE>2410</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2410</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::IsSpace' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::IsSpace</FUNCTION>
    <DECORATED>?IsSpace@internal@testing@@YA_ND@Z</DECORATED>
    <FUNCLINE>2410</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2414</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>26472</DEFECTCODE>
    <DESCRIPTION>Don't use a static_cast for arithmetic conversions. Use brace initialization, gsl::narrow_cast or gsl::narrow (type.1).</DESCRIPTION>
    <FUNCTION>testing::internal::IsUpper</FUNCTION>
    <DECORATED>?IsUpper@internal@testing@@YA_ND@Z</DECORATED>
    <FUNCLINE>2413</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2413</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::IsUpper' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::IsUpper</FUNCTION>
    <DECORATED>?IsUpper@internal@testing@@YA_ND@Z</DECORATED>
    <FUNCLINE>2413</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2417</LINE>
      <COLUMN>18</COLUMN>
    </SFA>
    <DEFECTCODE>26472</DEFECTCODE>
    <DESCRIPTION>Don't use a static_cast for arithmetic conversions. Use brace initialization, gsl::narrow_cast or gsl::narrow (type.1).</DESCRIPTION>
    <FUNCTION>testing::internal::IsXDigit</FUNCTION>
    <DECORATED>?IsXDigit@internal@testing@@YA_ND@Z</DECORATED>
    <FUNCLINE>2416</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2416</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::IsXDigit' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::IsXDigit</FUNCTION>
    <DECORATED>?IsXDigit@internal@testing@@YA_ND@Z</DECORATED>
    <FUNCLINE>2416</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2420</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26472</DEFECTCODE>
    <DESCRIPTION>Don't use a static_cast for arithmetic conversions. Use brace initialization, gsl::narrow_cast or gsl::narrow (type.1).</DESCRIPTION>
    <FUNCTION>testing::internal::IsXDigit</FUNCTION>
    <DECORATED>?IsXDigit@internal@testing@@YA_N_W@Z</DECORATED>
    <FUNCLINE>2419</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2419</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::IsXDigit' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::IsXDigit</FUNCTION>
    <DECORATED>?IsXDigit@internal@testing@@YA_N_W@Z</DECORATED>
    <FUNCLINE>2419</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2425</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26472</DEFECTCODE>
    <DESCRIPTION>Don't use a static_cast for arithmetic conversions. Use brace initialization, gsl::narrow_cast or gsl::narrow (type.1).</DESCRIPTION>
    <FUNCTION>testing::internal::ToLower</FUNCTION>
    <DECORATED>?ToLower@internal@testing@@YADD@Z</DECORATED>
    <FUNCLINE>2424</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2425</LINE>
      <COLUMN>9</COLUMN>
    </SFA>
    <DEFECTCODE>26472</DEFECTCODE>
    <DESCRIPTION>Don't use a static_cast for arithmetic conversions. Use brace initialization, gsl::narrow_cast or gsl::narrow (type.1).</DESCRIPTION>
    <FUNCTION>testing::internal::ToLower</FUNCTION>
    <DECORATED>?ToLower@internal@testing@@YADD@Z</DECORATED>
    <FUNCLINE>2424</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2424</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::ToLower' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::ToLower</FUNCTION>
    <DECORATED>?ToLower@internal@testing@@YADD@Z</DECORATED>
    <FUNCLINE>2424</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2428</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26472</DEFECTCODE>
    <DESCRIPTION>Don't use a static_cast for arithmetic conversions. Use brace initialization, gsl::narrow_cast or gsl::narrow (type.1).</DESCRIPTION>
    <FUNCTION>testing::internal::ToUpper</FUNCTION>
    <DECORATED>?ToUpper@internal@testing@@YADD@Z</DECORATED>
    <FUNCLINE>2427</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2428</LINE>
      <COLUMN>9</COLUMN>
    </SFA>
    <DEFECTCODE>26472</DEFECTCODE>
    <DESCRIPTION>Don't use a static_cast for arithmetic conversions. Use brace initialization, gsl::narrow_cast or gsl::narrow (type.1).</DESCRIPTION>
    <FUNCTION>testing::internal::ToUpper</FUNCTION>
    <DECORATED>?ToUpper@internal@testing@@YADD@Z</DECORATED>
    <FUNCLINE>2427</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2427</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::ToUpper' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::ToUpper</FUNCTION>
    <DECORATED>?ToUpper@internal@testing@@YADD@Z</DECORATED>
    <FUNCLINE>2427</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2462</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::posix::IsATTY' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::posix::IsATTY</FUNCTION>
    <DECORATED>?IsATTY@posix@internal@testing@@YAHH@Z</DECORATED>
    <FUNCLINE>2462</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2464</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::posix::StrCaseCmp' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::posix::StrCaseCmp</FUNCTION>
    <DECORATED>?StrCaseCmp@posix@internal@testing@@YAHPEBD0@Z</DECORATED>
    <FUNCLINE>2464</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2467</LINE>
      <COLUMN>13</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::posix::StrDup' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::posix::StrDup</FUNCTION>
    <DECORATED>?StrDup@posix@internal@testing@@YAPEADPEBD@Z</DECORATED>
    <FUNCLINE>2467</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2475</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::posix::FileNo' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::posix::FileNo</FUNCTION>
    <DECORATED>?FileNo@posix@internal@testing@@YAHPEAU_iobuf@@@Z</DECORATED>
    <FUNCLINE>2475</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2476</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::posix::Stat' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::posix::Stat</FUNCTION>
    <DECORATED>?Stat@posix@internal@testing@@YAHPEBDPEAU_stat64i32@@@Z</DECORATED>
    <FUNCLINE>2476</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2477</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::posix::RmDir' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::posix::RmDir</FUNCTION>
    <DECORATED>?RmDir@posix@internal@testing@@YAHPEBD@Z</DECORATED>
    <FUNCLINE>2477</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2478</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::posix::IsDir' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::posix::IsDir</FUNCTION>
    <DECORATED>?IsDir@posix@internal@testing@@YA_NAEBU_stat64i32@@@Z</DECORATED>
    <FUNCLINE>2478</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2503</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::posix::StrNCpy' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::posix::StrNCpy</FUNCTION>
    <DECORATED>?StrNCpy@posix@internal@testing@@YAPEBDPEADPEBD_K@Z</DECORATED>
    <FUNCLINE>2503</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2512</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::posix::ChDir' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::posix::ChDir</FUNCTION>
    <DECORATED>?ChDir@posix@internal@testing@@YAHPEBD@Z</DECORATED>
    <FUNCLINE>2512</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2514</LINE>
      <COLUMN>13</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::posix::FOpen' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::posix::FOpen</FUNCTION>
    <DECORATED>?FOpen@posix@internal@testing@@YAPEAU_iobuf@@PEBD0@Z</DECORATED>
    <FUNCLINE>2514</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2518</LINE>
      <COLUMN>13</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::posix::FReopen' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::posix::FReopen</FUNCTION>
    <DECORATED>?FReopen@posix@internal@testing@@YAPEAU_iobuf@@PEBD0PEAU4@@Z</DECORATED>
    <FUNCLINE>2518</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2521</LINE>
      <COLUMN>13</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::posix::FDOpen' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::posix::FDOpen</FUNCTION>
    <DECORATED>?FDOpen@posix@internal@testing@@YAPEAU_iobuf@@HPEBD@Z</DECORATED>
    <FUNCLINE>2521</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2523</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::posix::FClose' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::posix::FClose</FUNCTION>
    <DECORATED>?FClose@posix@internal@testing@@YAHPEAU_iobuf@@@Z</DECORATED>
    <FUNCLINE>2523</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2526</LINE>
      <COLUMN>9</COLUMN>
    </SFA>
    <DEFECTCODE>26472</DEFECTCODE>
    <DESCRIPTION>Don't use a static_cast for arithmetic conversions. Use brace initialization, gsl::narrow_cast or gsl::narrow (type.1).</DESCRIPTION>
    <FUNCTION>testing::internal::posix::Read</FUNCTION>
    <DECORATED>?Read@posix@internal@testing@@YAHHPEAXI@Z</DECORATED>
    <FUNCLINE>2525</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2525</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::posix::Read' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::posix::Read</FUNCTION>
    <DECORATED>?Read@posix@internal@testing@@YAHHPEAXI@Z</DECORATED>
    <FUNCLINE>2525</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2529</LINE>
      <COLUMN>9</COLUMN>
    </SFA>
    <DEFECTCODE>26472</DEFECTCODE>
    <DESCRIPTION>Don't use a static_cast for arithmetic conversions. Use brace initialization, gsl::narrow_cast or gsl::narrow (type.1).</DESCRIPTION>
    <FUNCTION>testing::internal::posix::Write</FUNCTION>
    <DECORATED>?Write@posix@internal@testing@@YAHHPEBXI@Z</DECORATED>
    <FUNCLINE>2528</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2528</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::posix::Write' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::posix::Write</FUNCTION>
    <DECORATED>?Write@posix@internal@testing@@YAHHPEBXI@Z</DECORATED>
    <FUNCLINE>2528</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2531</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::posix::Close' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::posix::Close</FUNCTION>
    <DECORATED>?Close@posix@internal@testing@@YAHH@Z</DECORATED>
    <FUNCLINE>2531</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2532</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::posix::StrError' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::posix::StrError</FUNCTION>
    <DECORATED>?StrError@posix@internal@testing@@YAPEBDH@Z</DECORATED>
    <FUNCLINE>2532</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2534</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::posix::GetEnv' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::posix::GetEnv</FUNCTION>
    <DECORATED>?GetEnv@posix@internal@testing@@YAPEBDPEBD@Z</DECORATED>
    <FUNCLINE>2534</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2557</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::posix::Abort' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::posix::Abort</FUNCTION>
    <DECORATED>?Abort@posix@internal@testing@@YAXXZ</DECORATED>
    <FUNCLINE>2557</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>2587</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26814</DEFECTCODE>
    <DESCRIPTION>The const variable 'testing::internal::kMaxBiggestInt' can be computed at compile-time. Consider using constexpr (con.5).</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest-message.h</FILENAME>
      <LINE>100</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION>testing::Message::{ctor}</FUNCTION>
    <DECORATED>??0Message@testing@@QEAA@AEBV01@@Z</DECORATED>
    <FUNCLINE>100</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest-message.h</FILENAME>
      <LINE>100</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26432</DEFECTCODE>
    <DESCRIPTION>If you define or delete any default operation in the type 'class testing::Message', define or delete them all (c.21).</DESCRIPTION>
    <FUNCTION>testing::Message::{ctor}</FUNCTION>
    <DECORATED>??0Message@testing@@QEAA@AEBV01@@Z</DECORATED>
    <FUNCLINE>100</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest-message.h</FILENAME>
      <LINE>105</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION>testing::Message::{ctor}</FUNCTION>
    <DECORATED>??0Message@testing@@QEAA@PEBD@Z</DECORATED>
    <FUNCLINE>105</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-filepath.h</FILENAME>
      <LINE>64</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::FilePath::{ctor}</FUNCTION>
    <DECORATED>??0FilePath@internal@testing@@QEAA@XZ</DECORATED>
    <FUNCLINE>64</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-filepath.h</FILENAME>
      <LINE>65</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26432</DEFECTCODE>
    <DESCRIPTION>If you define or delete any default operation in the type 'class testing::internal::FilePath', define or delete them all (c.21).</DESCRIPTION>
    <FUNCTION>testing::internal::FilePath::{ctor}</FUNCTION>
    <DECORATED>??0FilePath@internal@testing@@QEAA@AEBV012@@Z</DECORATED>
    <FUNCLINE>65</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-filepath.h</FILENAME>
      <LINE>80</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::FilePath::string' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::FilePath::string</FUNCTION>
    <DECORATED>?string@FilePath@internal@testing@@QEBAAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ</DECORATED>
    <FUNCLINE>80</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-filepath.h</FILENAME>
      <LINE>81</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::FilePath::c_str' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::FilePath::c_str</FUNCTION>
    <DECORATED>?c_str@FilePath@internal@testing@@QEBAPEBDXZ</DECORATED>
    <FUNCLINE>81</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-filepath.h</FILENAME>
      <LINE>114</LINE>
      <COLUMN>7</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::FilePath::IsEmpty' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::FilePath::IsEmpty</FUNCTION>
    <DECORATED>?IsEmpty@FilePath@internal@testing@@QEBA_NXZ</DECORATED>
    <FUNCLINE>114</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-type-util.h</FILENAME>
      <LINE>68</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26496</DEFECTCODE>
    <DESCRIPTION>The variable 'end' is assigned only once, mark it as const (con.4).</DESCRIPTION>
    <FUNCTION>testing::internal::CanonicalizeForStdLibVersioning</FUNCTION>
    <DECORATED>?CanonicalizeForStdLibVersioning@internal@testing@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@Z</DECORATED>
    <FUNCLINE>65</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-type-util.h</FILENAME>
      <LINE>67</LINE>
      <COLUMN>25</COLUMN>
    </SFA>
    <DEFECTCODE>26485</DEFECTCODE>
    <DESCRIPTION>Expression '`testing::internal::CanonicalizeForStdLibVersioning'::`2'::prefix': No array to pointer decay (bounds.3).</DESCRIPTION>
    <FUNCTION>testing::internal::CanonicalizeForStdLibVersioning</FUNCTION>
    <DECORATED>?CanonicalizeForStdLibVersioning@internal@testing@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@Z</DECORATED>
    <FUNCLINE>65</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-type-util.h</FILENAME>
      <LINE>67</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26485</DEFECTCODE>
    <DESCRIPTION>Expression '`testing::internal::CanonicalizeForStdLibVersioning'::`2'::prefix': No array to pointer decay (bounds.3).</DESCRIPTION>
    <FUNCTION>testing::internal::CanonicalizeForStdLibVersioning</FUNCTION>
    <DECORATED>?CanonicalizeForStdLibVersioning@internal@testing@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@Z</DECORATED>
    <FUNCLINE>65</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-type-util.h</FILENAME>
      <LINE>68</LINE>
      <COLUMN>52</COLUMN>
    </SFA>
    <DEFECTCODE>26485</DEFECTCODE>
    <DESCRIPTION>Expression '`testing::internal::CanonicalizeForStdLibVersioning'::`2'::prefix': No array to pointer decay (bounds.3).</DESCRIPTION>
    <FUNCTION>testing::internal::CanonicalizeForStdLibVersioning</FUNCTION>
    <DECORATED>?CanonicalizeForStdLibVersioning@internal@testing@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@Z</DECORATED>
    <FUNCLINE>65</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-internal.h</FILENAME>
      <LINE>269</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26472</DEFECTCODE>
    <DESCRIPTION>Don't use a static_cast for arithmetic conversions. Use brace initialization, gsl::narrow_cast or gsl::narrow (type.1).</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-internal.h</FILENAME>
      <LINE>402</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::FloatingPoint&lt;float&gt;::Max' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::FloatingPoint&lt;float&gt;::Max</FUNCTION>
    <DECORATED>?Max@?$FloatingPoint@M@internal@testing@@SAMXZ</DECORATED>
    <FUNCLINE>402</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-internal.h</FILENAME>
      <LINE>404</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::FloatingPoint&lt;double&gt;::Max' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::FloatingPoint&lt;double&gt;::Max</FUNCTION>
    <DECORATED>?Max@?$FloatingPoint@N@internal@testing@@SANXZ</DECORATED>
    <FUNCLINE>404</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-internal.h</FILENAME>
      <LINE>454</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26432</DEFECTCODE>
    <DESCRIPTION>If you define or delete any default operation in the type 'class testing::internal::TestFactoryBase', define or delete them all (c.21).</DESCRIPTION>
    <FUNCTION>testing::internal::TestFactoryBase::{dtor}</FUNCTION>
    <DECORATED>??1TestFactoryBase@internal@testing@@UEAA@XZ</DECORATED>
    <FUNCLINE>454</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-internal.h</FILENAME>
      <LINE>461</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::TestFactoryBase::{ctor}</FUNCTION>
    <DECORATED>??0TestFactoryBase@internal@testing@@IEAA@XZ</DECORATED>
    <FUNCLINE>461</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-internal.h</FILENAME>
      <LINE>542</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::TypedTestCasePState::{ctor}</FUNCTION>
    <DECORATED>??0TypedTestCasePState@internal@testing@@QEAA@XZ</DECORATED>
    <FUNCLINE>542</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-internal.h</FILENAME>
      <LINE>567</LINE>
      <COLUMN>4</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>testing::internal::TypedTestCasePState::GetCodeLocation</FUNCTION>
    <DECORATED>?GetCodeLocation@TypedTestCasePState@internal@testing@@QEBAAEBUCodeLocation@23@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z</DECORATED>
    <FUNCLINE>565</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-internal.h</FILENAME>
      <LINE>566</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26496</DEFECTCODE>
    <DESCRIPTION>The variable 'it' is assigned only once, mark it as const (con.4).</DESCRIPTION>
    <FUNCTION>testing::internal::TypedTestCasePState::GetCodeLocation</FUNCTION>
    <DECORATED>?GetCodeLocation@TypedTestCasePState@internal@testing@@QEBAAEBUCodeLocation@23@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z</DECORATED>
    <FUNCLINE>565</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-internal.h</FILENAME>
      <LINE>567</LINE>
      <COLUMN>4</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>testing::internal::TypedTestCasePState::GetCodeLocation</FUNCTION>
    <DECORATED>?GetCodeLocation@TypedTestCasePState@internal@testing@@QEBAAEBUCodeLocation@23@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z</DECORATED>
    <FUNCLINE>565</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-internal.h</FILENAME>
      <LINE>593</LINE>
      <COLUMN>16</COLUMN>
    </SFA>
    <DEFECTCODE>26481</DEFECTCODE>
    <DESCRIPTION>Don't use pointer arithmetic. Use span instead (bounds.1).</DESCRIPTION>
    <FUNCTION>testing::internal::SkipComma</FUNCTION>
    <DECORATED>?SkipComma@internal@testing@@YAPEBDPEBD@Z</DECORATED>
    <FUNCLINE>588</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-internal.h</FILENAME>
      <LINE>778</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::ConstCharPtr::ConstCharPtr' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::ConstCharPtr::{ctor}</FUNCTION>
    <DECORATED>??0ConstCharPtr@internal@testing@@QEAA@PEBD@Z</DECORATED>
    <FUNCLINE>778</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-internal.h</FILENAME>
      <LINE>779</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::ConstCharPtr::operator bool' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::ConstCharPtr::operator bool</FUNCTION>
    <DECORATED>??BConstCharPtr@internal@testing@@QEBA_NXZ</DECORATED>
    <FUNCLINE>779</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-internal.h</FILENAME>
      <LINE>792</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::Random::Random' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::Random::{ctor}</FUNCTION>
    <DECORATED>??0Random@internal@testing@@QEAA@I@Z</DECORATED>
    <FUNCLINE>792</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-internal.h</FILENAME>
      <LINE>794</LINE>
      <COLUMN>7</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::Random::Reseed' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::Random::Reseed</FUNCTION>
    <DECORATED>?Reseed@Random@internal@testing@@QEAAXI@Z</DECORATED>
    <FUNCLINE>794</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-death-test-internal.h</FILENAME>
      <LINE>84</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26432</DEFECTCODE>
    <DESCRIPTION>If you define or delete any default operation in the type 'class testing::internal::DeathTest', define or delete them all (c.21).</DESCRIPTION>
    <FUNCTION>testing::internal::DeathTest::{dtor}</FUNCTION>
    <DECORATED>??1DeathTest@internal@testing@@UEAA@XZ</DECORATED>
    <FUNCLINE>84</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-death-test-internal.h</FILENAME>
      <LINE>89</LINE>
      <COLUMN>4</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::DeathTest::ReturnSentinel::ReturnSentinel' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::DeathTest::ReturnSentinel::{ctor}</FUNCTION>
    <DECORATED>??0ReturnSentinel@DeathTest@internal@testing@@QEAA@PEAV123@@Z</DECORATED>
    <FUNCLINE>89</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-death-test-internal.h</FILENAME>
      <LINE>90</LINE>
      <COLUMN>5</COLUMN>
    </SFA>
    <DEFECTCODE>26432</DEFECTCODE>
    <DESCRIPTION>If you define or delete any default operation in the type 'class testing::internal::DeathTest::ReturnSentinel', define or delete them all (c.21).</DESCRIPTION>
    <FUNCTION>testing::internal::DeathTest::ReturnSentinel::{dtor}</FUNCTION>
    <DECORATED>??1ReturnSentinel@DeathTest@internal@testing@@QEAA@XZ</DECORATED>
    <FUNCLINE>90</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-death-test-internal.h</FILENAME>
      <LINE>90</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26447</DEFECTCODE>
    <DESCRIPTION>The function is declared 'noexcept' but calls function 'Abort()' which may throw exceptions (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::DeathTest::ReturnSentinel::{dtor}</FUNCTION>
    <DECORATED>??1ReturnSentinel@DeathTest@internal@testing@@QEAA@XZ</DECORATED>
    <FUNCLINE>90</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-death-test-internal.h</FILENAME>
      <LINE>146</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26432</DEFECTCODE>
    <DESCRIPTION>If you define or delete any default operation in the type 'class testing::internal::DeathTestFactory', define or delete them all (c.21).</DESCRIPTION>
    <FUNCTION>testing::internal::DeathTestFactory::{dtor}</FUNCTION>
    <DECORATED>??1DeathTestFactory@internal@testing@@UEAA@XZ</DECORATED>
    <FUNCLINE>146</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-death-test-internal.h</FILENAME>
      <LINE>251</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26432</DEFECTCODE>
    <DESCRIPTION>If you define or delete any default operation in the type 'class testing::internal::InternalRunDeathTestFlag', define or delete them all (c.21).</DESCRIPTION>
    <FUNCTION>testing::internal::InternalRunDeathTestFlag::{dtor}</FUNCTION>
    <DECORATED>??1InternalRunDeathTestFlag@internal@testing@@QEAA@XZ</DECORATED>
    <FUNCLINE>251</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-death-test-internal.h</FILENAME>
      <LINE>253</LINE>
      <COLUMN>18</COLUMN>
    </SFA>
    <DEFECTCODE>26447</DEFECTCODE>
    <DESCRIPTION>The function is declared 'noexcept' but calls function 'Close()' which may throw exceptions (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::InternalRunDeathTestFlag::{dtor}</FUNCTION>
    <DECORATED>??1InternalRunDeathTestFlag@internal@testing@@QEAA@XZ</DECORATED>
    <FUNCLINE>251</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-death-test-internal.h</FILENAME>
      <LINE>256</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::InternalRunDeathTestFlag::file' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::InternalRunDeathTestFlag::file</FUNCTION>
    <DECORATED>?file@InternalRunDeathTestFlag@internal@testing@@QEBAAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ</DECORATED>
    <FUNCLINE>256</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-death-test-internal.h</FILENAME>
      <LINE>257</LINE>
      <COLUMN>6</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::InternalRunDeathTestFlag::line' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::InternalRunDeathTestFlag::line</FUNCTION>
    <DECORATED>?line@InternalRunDeathTestFlag@internal@testing@@QEBAHXZ</DECORATED>
    <FUNCLINE>257</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-death-test-internal.h</FILENAME>
      <LINE>258</LINE>
      <COLUMN>6</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::InternalRunDeathTestFlag::index' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::InternalRunDeathTestFlag::index</FUNCTION>
    <DECORATED>?index@InternalRunDeathTestFlag@internal@testing@@QEBAHXZ</DECORATED>
    <FUNCLINE>258</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-death-test-internal.h</FILENAME>
      <LINE>259</LINE>
      <COLUMN>6</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::InternalRunDeathTestFlag::write_fd' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::InternalRunDeathTestFlag::write_fd</FUNCTION>
    <DECORATED>?write_fd@InternalRunDeathTestFlag@internal@testing@@QEBAHXZ</DECORATED>
    <FUNCLINE>259</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-linked_ptr.h</FILENAME>
      <LINE>92</LINE>
      <COLUMN>7</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::linked_ptr_internal::join_new' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::linked_ptr_internal::join_new</FUNCTION>
    <DECORATED>?join_new@linked_ptr_internal@internal@testing@@QEAAXXZ</DECORATED>
    <FUNCLINE>92</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest-printers.h</FILENAME>
      <LINE>164</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26814</DEFECTCODE>
    <DESCRIPTION>The const variable 'testing::internal2::kProtobufOneLinerMaxLength' can be computed at compile-time. Consider using constexpr (con.5).</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest-printers.h</FILENAME>
      <LINE>541</LINE>
      <COLUMN>10</COLUMN>
    </SFA>
    <DEFECTCODE>26472</DEFECTCODE>
    <DESCRIPTION>Don't use a static_cast for arithmetic conversions. Use brace initialization, gsl::narrow_cast or gsl::narrow (type.1).</DESCRIPTION>
    <FUNCTION>testing::internal::PrintTo</FUNCTION>
    <DECORATED>?PrintTo@internal@testing@@YAXDPEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z</DECORATED>
    <FUNCLINE>537</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest-printers.h</FILENAME>
      <LINE>545</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>26429</DEFECTCODE>
    <DESCRIPTION>Symbol 'os' is never tested for nullness, it can be marked as not_null (f.23).</DESCRIPTION>
    <FUNCTION>testing::internal::PrintTo</FUNCTION>
    <DECORATED>?PrintTo@internal@testing@@YAX_NPEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z</DECORATED>
    <FUNCLINE>545</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest-printers.h</FILENAME>
      <LINE>560</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>26461</DEFECTCODE>
    <DESCRIPTION>The pointer argument 's' for function 'testing::internal::PrintTo' can be marked as a pointer to const (con.3).</DESCRIPTION>
    <FUNCTION>testing::internal::PrintTo</FUNCTION>
    <DECORATED>?PrintTo@internal@testing@@YAXPEADPEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z</DECORATED>
    <FUNCLINE>560</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest-printers.h</FILENAME>
      <LINE>569</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>26461</DEFECTCODE>
    <DESCRIPTION>The pointer argument 's' for function 'testing::internal::PrintTo' can be marked as a pointer to const (con.3).</DESCRIPTION>
    <FUNCTION>testing::internal::PrintTo</FUNCTION>
    <DECORATED>?PrintTo@internal@testing@@YAXPEACPEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z</DECORATED>
    <FUNCLINE>569</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest-printers.h</FILENAME>
      <LINE>575</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>26461</DEFECTCODE>
    <DESCRIPTION>The pointer argument 's' for function 'testing::internal::PrintTo' can be marked as a pointer to const (con.3).</DESCRIPTION>
    <FUNCTION>testing::internal::PrintTo</FUNCTION>
    <DECORATED>?PrintTo@internal@testing@@YAXPEAEPEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z</DECORATED>
    <FUNCLINE>575</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest-printers.h</FILENAME>
      <LINE>587</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>26461</DEFECTCODE>
    <DESCRIPTION>The pointer argument 's' for function 'testing::internal::PrintTo' can be marked as a pointer to const (con.3).</DESCRIPTION>
    <FUNCTION>testing::internal::PrintTo</FUNCTION>
    <DECORATED>?PrintTo@internal@testing@@YAXPEA_WPEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z</DECORATED>
    <FUNCLINE>587</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest-printers.h</FILENAME>
      <LINE>642</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>26429</DEFECTCODE>
    <DESCRIPTION>Symbol 'os' is never tested for nullness, it can be marked as not_null (f.23).</DESCRIPTION>
    <FUNCTION>testing::internal::PrintTo</FUNCTION>
    <DECORATED>?PrintTo@internal@testing@@YAX$$TPEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z</DECORATED>
    <FUNCLINE>642</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest-printers.h</FILENAME>
      <LINE>907</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26429</DEFECTCODE>
    <DESCRIPTION>Symbol 'os' is never tested for nullness, it can be marked as not_null (f.23).</DESCRIPTION>
    <FUNCTION>testing::internal::UniversalTersePrinter&lt;char const *&gt;::Print</FUNCTION>
    <DECORATED>?Print@?$UniversalTersePrinter@PEBD@internal@testing@@SAXPEBDPEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z</DECORATED>
    <FUNCLINE>907</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest-printers.h</FILENAME>
      <LINE>918</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26461</DEFECTCODE>
    <DESCRIPTION>The pointer argument 'str' for function 'testing::internal::UniversalTersePrinter&lt;char * __ptr64&gt;::Print' can be marked as a pointer to const (con.3).</DESCRIPTION>
    <FUNCTION>testing::internal::UniversalTersePrinter&lt;char *&gt;::Print</FUNCTION>
    <DECORATED>?Print@?$UniversalTersePrinter@PEAD@internal@testing@@SAXPEADPEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z</DECORATED>
    <FUNCLINE>918</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest-printers.h</FILENAME>
      <LINE>927</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26429</DEFECTCODE>
    <DESCRIPTION>Symbol 'os' is never tested for nullness, it can be marked as not_null (f.23).</DESCRIPTION>
    <FUNCTION>testing::internal::UniversalTersePrinter&lt;wchar_t const *&gt;::Print</FUNCTION>
    <DECORATED>?Print@?$UniversalTersePrinter@PEB_W@internal@testing@@SAXPEB_WPEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z</DECORATED>
    <FUNCLINE>927</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest-printers.h</FILENAME>
      <LINE>940</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26461</DEFECTCODE>
    <DESCRIPTION>The pointer argument 'str' for function 'testing::internal::UniversalTersePrinter&lt;wchar_t * __ptr64&gt;::Print' can be marked as a pointer to const (con.3).</DESCRIPTION>
    <FUNCTION>testing::internal::UniversalTersePrinter&lt;wchar_t *&gt;::Print</FUNCTION>
    <DECORATED>?Print@?$UniversalTersePrinter@PEA_W@internal@testing@@SAXPEA_WPEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z</DECORATED>
    <FUNCLINE>940</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-param-util.h</FILENAME>
      <LINE>468</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26432</DEFECTCODE>
    <DESCRIPTION>If you define or delete any default operation in the type 'class testing::internal::ParameterizedTestCaseInfoBase', define or delete them all (c.21).</DESCRIPTION>
    <FUNCTION>testing::internal::ParameterizedTestCaseInfoBase::{dtor}</FUNCTION>
    <DECORATED>??1ParameterizedTestCaseInfoBase@internal@testing@@UEAA@XZ</DECORATED>
    <FUNCLINE>468</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-param-util.h</FILENAME>
      <LINE>481</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::ParameterizedTestCaseInfoBase::{ctor}</FUNCTION>
    <DECORATED>??0ParameterizedTestCaseInfoBase@internal@testing@@IEAA@XZ</DECORATED>
    <FUNCLINE>481</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-param-util.h</FILENAME>
      <LINE>665</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::ParameterizedTestCaseRegistry::{ctor}</FUNCTION>
    <DECORATED>??0ParameterizedTestCaseRegistry@internal@testing@@QEAA@XZ</DECORATED>
    <FUNCLINE>665</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-param-util.h</FILENAME>
      <LINE>666</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26432</DEFECTCODE>
    <DESCRIPTION>If you define or delete any default operation in the type 'class testing::internal::ParameterizedTestCaseRegistry', define or delete them all (c.21).</DESCRIPTION>
    <FUNCTION>testing::internal::ParameterizedTestCaseRegistry::{dtor}</FUNCTION>
    <DECORATED>??1ParameterizedTestCaseRegistry@internal@testing@@QEAA@XZ</DECORATED>
    <FUNCLINE>666</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-param-util.h</FILENAME>
      <LINE>668</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>26447</DEFECTCODE>
    <DESCRIPTION>The function is declared 'noexcept' but calls function 'operator!=()' which may throw exceptions (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::ParameterizedTestCaseRegistry::{dtor}</FUNCTION>
    <DECORATED>??1ParameterizedTestCaseRegistry@internal@testing@@QEAA@XZ</DECORATED>
    <FUNCLINE>666</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-param-util.h</FILENAME>
      <LINE>669</LINE>
      <COLUMN>13</COLUMN>
    </SFA>
    <DEFECTCODE>26447</DEFECTCODE>
    <DESCRIPTION>The function is declared 'noexcept' but calls function 'operator*()' which may throw exceptions (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::ParameterizedTestCaseRegistry::{dtor}</FUNCTION>
    <DECORATED>??1ParameterizedTestCaseRegistry@internal@testing@@QEAA@XZ</DECORATED>
    <FUNCLINE>666</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-param-util.h</FILENAME>
      <LINE>668</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26447</DEFECTCODE>
    <DESCRIPTION>The function is declared 'noexcept' but calls function 'operator++()' which may throw exceptions (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::ParameterizedTestCaseRegistry::{dtor}</FUNCTION>
    <DECORATED>??1ParameterizedTestCaseRegistry@internal@testing@@QEAA@XZ</DECORATED>
    <FUNCLINE>666</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest-test-part.h</FILENAME>
      <LINE>62</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26812</DEFECTCODE>
    <DESCRIPTION>The enum type 'testing::TestPartResult::Type' is unscoped. Prefer 'enum class' over 'enum' (Enum.3).</DESCRIPTION>
    <FUNCTION>testing::TestPartResult::{ctor}</FUNCTION>
    <DECORATED>??0TestPartResult@testing@@QEAA@W4Type@01@PEBDH1@Z</DECORATED>
    <FUNCLINE>62</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest-test-part.h</FILENAME>
      <LINE>74</LINE>
      <COLUMN>7</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestPartResult::type' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestPartResult::type</FUNCTION>
    <DECORATED>?type@TestPartResult@testing@@QEBA?AW4Type@12@XZ</DECORATED>
    <FUNCLINE>74</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest-test-part.h</FILENAME>
      <LINE>78</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestPartResult::file_name' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestPartResult::file_name</FUNCTION>
    <DECORATED>?file_name@TestPartResult@testing@@QEBAPEBDXZ</DECORATED>
    <FUNCLINE>78</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest-test-part.h</FILENAME>
      <LINE>84</LINE>
      <COLUMN>6</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestPartResult::line_number' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestPartResult::line_number</FUNCTION>
    <DECORATED>?line_number@TestPartResult@testing@@QEBAHXZ</DECORATED>
    <FUNCLINE>84</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest-test-part.h</FILENAME>
      <LINE>87</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestPartResult::summary' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestPartResult::summary</FUNCTION>
    <DECORATED>?summary@TestPartResult@testing@@QEBAPEBDXZ</DECORATED>
    <FUNCLINE>87</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest-test-part.h</FILENAME>
      <LINE>90</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestPartResult::message' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestPartResult::message</FUNCTION>
    <DECORATED>?message@TestPartResult@testing@@QEBAPEBDXZ</DECORATED>
    <FUNCLINE>90</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest-test-part.h</FILENAME>
      <LINE>93</LINE>
      <COLUMN>7</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestPartResult::passed' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestPartResult::passed</FUNCTION>
    <DECORATED>?passed@TestPartResult@testing@@QEBA_NXZ</DECORATED>
    <FUNCLINE>93</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest-test-part.h</FILENAME>
      <LINE>96</LINE>
      <COLUMN>7</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestPartResult::failed' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestPartResult::failed</FUNCTION>
    <DECORATED>?failed@TestPartResult@testing@@QEBA_NXZ</DECORATED>
    <FUNCLINE>96</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest-test-part.h</FILENAME>
      <LINE>99</LINE>
      <COLUMN>7</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestPartResult::nonfatally_failed' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestPartResult::nonfatally_failed</FUNCTION>
    <DECORATED>?nonfatally_failed@TestPartResult@testing@@QEBA_NXZ</DECORATED>
    <FUNCLINE>99</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest-test-part.h</FILENAME>
      <LINE>102</LINE>
      <COLUMN>7</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestPartResult::fatally_failed' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestPartResult::fatally_failed</FUNCTION>
    <DECORATED>?fatally_failed@TestPartResult@testing@@QEBA_NXZ</DECORATED>
    <FUNCLINE>102</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest-test-part.h</FILENAME>
      <LINE>130</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestPartResultArray::{ctor}</FUNCTION>
    <DECORATED>??0TestPartResultArray@testing@@QEAA@XZ</DECORATED>
    <FUNCLINE>130</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest-test-part.h</FILENAME>
      <LINE>150</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26432</DEFECTCODE>
    <DESCRIPTION>If you define or delete any default operation in the type 'class testing::TestPartResultReporterInterface', define or delete them all (c.21).</DESCRIPTION>
    <FUNCTION>testing::TestPartResultReporterInterface::{dtor}</FUNCTION>
    <DECORATED>??1TestPartResultReporterInterface@testing@@UEAA@XZ</DECORATED>
    <FUNCLINE>150</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest-test-part.h</FILENAME>
      <LINE>169</LINE>
      <COLUMN>7</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::HasNewFatalFailureHelper::has_new_fatal_failure' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::HasNewFatalFailureHelper::has_new_fatal_failure</FUNCTION>
    <DECORATED>?has_new_fatal_failure@HasNewFatalFailureHelper@internal@testing@@QEBA_NXZ</DECORATED>
    <FUNCLINE>169</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>171</LINE>
      <COLUMN>32</COLUMN>
    </SFA>
    <DEFECTCODE>26814</DEFECTCODE>
    <DESCRIPTION>The const variable 'testing::kMaxStackTraceDepth' can be computed at compile-time. Consider using constexpr (con.5).</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>311</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>26432</DEFECTCODE>
    <DESCRIPTION>If you define or delete any default operation in the type 'class testing::AssertionResult', define or delete them all (c.21).</DESCRIPTION>
    <FUNCTION>testing::AssertionResult::=</FUNCTION>
    <DECORATED>??4AssertionResult@testing@@QEAAAEAV01@V01@@Z</DECORATED>
    <FUNCLINE>311</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>317</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::AssertionResult::operator bool' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::AssertionResult::operator bool</FUNCTION>
    <DECORATED>??BAssertionResult@testing@@QEBA_NXZ</DECORATED>
    <FUNCLINE>317</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>351</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION>testing::AssertionResult::AppendMessage</FUNCTION>
    <DECORATED>?AppendMessage@AssertionResult@testing@@AEAAXAEBVMessage@2@@Z</DECORATED>
    <FUNCLINE>349</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>427</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::Test::SetUpTestCase' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::Test::SetUpTestCase</FUNCTION>
    <DECORATED>?SetUpTestCase@Test@testing@@SAXXZ</DECORATED>
    <FUNCLINE>427</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>435</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::Test::TearDownTestCase' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::Test::TearDownTestCase</FUNCTION>
    <DECORATED>?TearDownTestCase@Test@testing@@SAXXZ</DECORATED>
    <FUNCLINE>435</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>491</LINE>
      <COLUMN>7</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::Test::DeleteSelf_' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::Test::DeleteSelf_</FUNCTION>
    <DECORATED>?DeleteSelf_@Test@testing@@AEAAXXZ</DECORATED>
    <FUNCLINE>491</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>512</LINE>
      <COLUMN>41</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::Test::Setup' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::Test::Setup</FUNCTION>
    <DECORATED>?Setup@Test@testing@@EEAAPEAUSetup_should_be_spelled_SetUp@12@XZ</DECORATED>
    <FUNCLINE>512</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>534</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestProperty::key' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestProperty::key</FUNCTION>
    <DECORATED>?key@TestProperty@testing@@QEBAPEBDXZ</DECORATED>
    <FUNCLINE>534</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>539</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestProperty::value' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestProperty::value</FUNCTION>
    <DECORATED>?value@TestProperty@testing@@QEBAPEBDXZ</DECORATED>
    <FUNCLINE>539</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>589</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestResult::elapsed_time' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestResult::elapsed_time</FUNCTION>
    <DECORATED>?elapsed_time@TestResult@testing@@QEBA_JXZ</DECORATED>
    <FUNCLINE>589</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>612</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestResult::test_part_results' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestResult::test_part_results</FUNCTION>
    <DECORATED>?test_part_results@TestResult@testing@@AEBAAEBV?$vector@VTestPartResult@testing@@V?$allocator@VTestPartResult@testing@@@std@@@std@@XZ</DECORATED>
    <FUNCLINE>612</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>617</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestResult::test_properties' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestResult::test_properties</FUNCTION>
    <DECORATED>?test_properties@TestResult@testing@@AEBAAEBV?$vector@VTestProperty@testing@@V?$allocator@VTestProperty@testing@@@std@@@std@@XZ</DECORATED>
    <FUNCLINE>617</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>622</LINE>
      <COLUMN>7</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestResult::set_elapsed_time' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestResult::set_elapsed_time</FUNCTION>
    <DECORATED>?set_elapsed_time@TestResult@testing@@AEAAX_J@Z</DECORATED>
    <FUNCLINE>622</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>643</LINE>
      <COLUMN>6</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestResult::death_test_count' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestResult::death_test_count</FUNCTION>
    <DECORATED>?death_test_count@TestResult@testing@@AEBAHXZ</DECORATED>
    <FUNCLINE>643</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>646</LINE>
      <COLUMN>6</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestResult::increment_death_test_count' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestResult::increment_death_test_count</FUNCTION>
    <DECORATED>?increment_death_test_count@TestResult@testing@@AEAAHXZ</DECORATED>
    <FUNCLINE>646</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>689</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestInfo::test_case_name' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestInfo::test_case_name</FUNCTION>
    <DECORATED>?test_case_name@TestInfo@testing@@QEBAPEBDXZ</DECORATED>
    <FUNCLINE>689</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>692</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestInfo::name' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestInfo::name</FUNCTION>
    <DECORATED>?name@TestInfo@testing@@QEBAPEBDXZ</DECORATED>
    <FUNCLINE>692</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>711</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestInfo::file' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestInfo::file</FUNCTION>
    <DECORATED>?file@TestInfo@testing@@QEBAPEBDXZ</DECORATED>
    <FUNCLINE>711</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>714</LINE>
      <COLUMN>6</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestInfo::line' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestInfo::line</FUNCTION>
    <DECORATED>?line@TestInfo@testing@@QEBAHXZ</DECORATED>
    <FUNCLINE>714</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>717</LINE>
      <COLUMN>7</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestInfo::is_in_another_shard' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestInfo::is_in_another_shard</FUNCTION>
    <DECORATED>?is_in_another_shard@TestInfo@testing@@QEBA_NXZ</DECORATED>
    <FUNCLINE>717</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>735</LINE>
      <COLUMN>7</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestInfo::should_run' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestInfo::should_run</FUNCTION>
    <DECORATED>?should_run@TestInfo@testing@@QEBA_NXZ</DECORATED>
    <FUNCLINE>735</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>738</LINE>
      <COLUMN>7</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestInfo::is_reportable' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestInfo::is_reportable</FUNCTION>
    <DECORATED>?is_reportable@TestInfo@testing@@QEBA_NXZ</DECORATED>
    <FUNCLINE>738</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>745</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestInfo::result' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestInfo::result</FUNCTION>
    <DECORATED>?result@TestInfo@testing@@QEBAPEBVTestResult@2@XZ</DECORATED>
    <FUNCLINE>745</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>841</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestCase::name' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestCase::name</FUNCTION>
    <DECORATED>?name@TestCase@testing@@QEBAPEBDXZ</DECORATED>
    <FUNCLINE>841</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>852</LINE>
      <COLUMN>7</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestCase::should_run' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestCase::should_run</FUNCTION>
    <DECORATED>?should_run@TestCase@testing@@QEBA_NXZ</DECORATED>
    <FUNCLINE>852</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>882</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestCase::elapsed_time' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestCase::elapsed_time</FUNCTION>
    <DECORATED>?elapsed_time@TestCase@testing@@QEBA_JXZ</DECORATED>
    <FUNCLINE>882</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>890</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestCase::ad_hoc_test_result' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestCase::ad_hoc_test_result</FUNCTION>
    <DECORATED>?ad_hoc_test_result@TestCase@testing@@QEBAAEBVTestResult@2@XZ</DECORATED>
    <FUNCLINE>890</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>897</LINE>
      <COLUMN>26</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestCase::test_info_list' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestCase::test_info_list</FUNCTION>
    <DECORATED>?test_info_list@TestCase@testing@@AEAAAEAV?$vector@PEAVTestInfo@testing@@V?$allocator@PEAVTestInfo@testing@@@std@@@std@@XZ</DECORATED>
    <FUNCLINE>897</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>900</LINE>
      <COLUMN>32</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestCase::test_info_list' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestCase::test_info_list</FUNCTION>
    <DECORATED>?test_info_list@TestCase@testing@@AEBAAEBV?$vector@PEAVTestInfo@testing@@V?$allocator@PEAVTestInfo@testing@@@std@@@std@@XZ</DECORATED>
    <FUNCLINE>900</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>909</LINE>
      <COLUMN>7</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestCase::set_should_run' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestCase::set_should_run</FUNCTION>
    <DECORATED>?set_should_run@TestCase@testing@@AEAAX_N@Z</DECORATED>
    <FUNCLINE>909</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>919</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26429</DEFECTCODE>
    <DESCRIPTION>Symbol 'test_case' is never tested for nullness, it can be marked as not_null (f.23).</DESCRIPTION>
    <FUNCTION>testing::TestCase::ClearTestCaseResult</FUNCTION>
    <DECORATED>?ClearTestCaseResult@TestCase@testing@@CAXPEAV12@@Z</DECORATED>
    <FUNCLINE>919</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>928</LINE>
      <COLUMN>7</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestCase::RunSetUpTestCase' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestCase::RunSetUpTestCase</FUNCTION>
    <DECORATED>?RunSetUpTestCase@TestCase@testing@@AEAAXXZ</DECORATED>
    <FUNCLINE>928</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>932</LINE>
      <COLUMN>7</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestCase::RunTearDownTestCase' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestCase::RunTearDownTestCase</FUNCTION>
    <DECORATED>?RunTearDownTestCase@TestCase@testing@@AEAAXXZ</DECORATED>
    <FUNCLINE>932</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>935</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26429</DEFECTCODE>
    <DESCRIPTION>Symbol 'test_info' is never tested for nullness, it can be marked as not_null (f.23).</DESCRIPTION>
    <FUNCTION>testing::TestCase::TestPassed</FUNCTION>
    <DECORATED>?TestPassed@TestCase@testing@@CA_NPEBVTestInfo@2@@Z</DECORATED>
    <FUNCLINE>935</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>940</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26429</DEFECTCODE>
    <DESCRIPTION>Symbol 'test_info' is never tested for nullness, it can be marked as not_null (f.23).</DESCRIPTION>
    <FUNCTION>testing::TestCase::TestFailed</FUNCTION>
    <DECORATED>?TestFailed@TestCase@testing@@CA_NPEBVTestInfo@2@@Z</DECORATED>
    <FUNCLINE>940</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>946</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26429</DEFECTCODE>
    <DESCRIPTION>Symbol 'test_info' is never tested for nullness, it can be marked as not_null (f.23).</DESCRIPTION>
    <FUNCTION>testing::TestCase::TestReportableDisabled</FUNCTION>
    <DECORATED>?TestReportableDisabled@TestCase@testing@@CA_NPEBVTestInfo@2@@Z</DECORATED>
    <FUNCLINE>946</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>951</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestCase::TestDisabled' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestCase::TestDisabled</FUNCTION>
    <DECORATED>?TestDisabled@TestCase@testing@@CA_NPEBVTestInfo@2@@Z</DECORATED>
    <FUNCLINE>951</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>956</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26429</DEFECTCODE>
    <DESCRIPTION>Symbol 'test_info' is never tested for nullness, it can be marked as not_null (f.23).</DESCRIPTION>
    <FUNCTION>testing::TestCase::TestReportable</FUNCTION>
    <DECORATED>?TestReportable@TestCase@testing@@CA_NPEBVTestInfo@2@@Z</DECORATED>
    <FUNCLINE>956</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>961</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26429</DEFECTCODE>
    <DESCRIPTION>Symbol 'test_info' is never tested for nullness, it can be marked as not_null (f.23).</DESCRIPTION>
    <FUNCTION>testing::TestCase::ShouldRunTest</FUNCTION>
    <DECORATED>?ShouldRunTest@TestCase@testing@@CA_NPEBVTestInfo@2@@Z</DECORATED>
    <FUNCLINE>961</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1016</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26432</DEFECTCODE>
    <DESCRIPTION>If you define or delete any default operation in the type 'class testing::Environment', define or delete them all (c.21).</DESCRIPTION>
    <FUNCTION>testing::Environment::{dtor}</FUNCTION>
    <DECORATED>??1Environment@testing@@UEAA@XZ</DECORATED>
    <FUNCLINE>1016</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1019</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::Environment::SetUp' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::Environment::SetUp</FUNCTION>
    <DECORATED>?SetUp@Environment@testing@@UEAAXXZ</DECORATED>
    <FUNCLINE>1019</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1022</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::Environment::TearDown' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::Environment::TearDown</FUNCTION>
    <DECORATED>?TearDown@Environment@testing@@UEAAXXZ</DECORATED>
    <FUNCLINE>1022</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1027</LINE>
      <COLUMN>41</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::Environment::Setup' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::Environment::Setup</FUNCTION>
    <DECORATED>?Setup@Environment@testing@@EEAAPEAUSetup_should_be_spelled_SetUp@12@XZ</DECORATED>
    <FUNCLINE>1027</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1046</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26432</DEFECTCODE>
    <DESCRIPTION>If you define or delete any default operation in the type 'class testing::TestEventListener', define or delete them all (c.21).</DESCRIPTION>
    <FUNCTION>testing::TestEventListener::{dtor}</FUNCTION>
    <DECORATED>??1TestEventListener@testing@@UEAA@XZ</DECORATED>
    <FUNCLINE>1046</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1101</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'testing::EmptyTestEventListener::OnTestProgramStart' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>testing::EmptyTestEventListener::OnTestProgramStart</FUNCTION>
    <DECORATED>?OnTestProgramStart@EmptyTestEventListener@testing@@UEAAXAEBVUnitTest@2@@Z</DECORATED>
    <FUNCLINE>1101</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1101</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::EmptyTestEventListener::OnTestProgramStart' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::EmptyTestEventListener::OnTestProgramStart</FUNCTION>
    <DECORATED>?OnTestProgramStart@EmptyTestEventListener@testing@@UEAAXAEBVUnitTest@2@@Z</DECORATED>
    <FUNCLINE>1101</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1102</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'testing::EmptyTestEventListener::OnTestIterationStart' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>testing::EmptyTestEventListener::OnTestIterationStart</FUNCTION>
    <DECORATED>?OnTestIterationStart@EmptyTestEventListener@testing@@UEAAXAEBVUnitTest@2@H@Z</DECORATED>
    <FUNCLINE>1102</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1102</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::EmptyTestEventListener::OnTestIterationStart' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::EmptyTestEventListener::OnTestIterationStart</FUNCTION>
    <DECORATED>?OnTestIterationStart@EmptyTestEventListener@testing@@UEAAXAEBVUnitTest@2@H@Z</DECORATED>
    <FUNCLINE>1102</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1104</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'testing::EmptyTestEventListener::OnEnvironmentsSetUpStart' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>testing::EmptyTestEventListener::OnEnvironmentsSetUpStart</FUNCTION>
    <DECORATED>?OnEnvironmentsSetUpStart@EmptyTestEventListener@testing@@UEAAXAEBVUnitTest@2@@Z</DECORATED>
    <FUNCLINE>1104</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1104</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::EmptyTestEventListener::OnEnvironmentsSetUpStart' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::EmptyTestEventListener::OnEnvironmentsSetUpStart</FUNCTION>
    <DECORATED>?OnEnvironmentsSetUpStart@EmptyTestEventListener@testing@@UEAAXAEBVUnitTest@2@@Z</DECORATED>
    <FUNCLINE>1104</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1105</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'testing::EmptyTestEventListener::OnEnvironmentsSetUpEnd' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>testing::EmptyTestEventListener::OnEnvironmentsSetUpEnd</FUNCTION>
    <DECORATED>?OnEnvironmentsSetUpEnd@EmptyTestEventListener@testing@@UEAAXAEBVUnitTest@2@@Z</DECORATED>
    <FUNCLINE>1105</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1105</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::EmptyTestEventListener::OnEnvironmentsSetUpEnd' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::EmptyTestEventListener::OnEnvironmentsSetUpEnd</FUNCTION>
    <DECORATED>?OnEnvironmentsSetUpEnd@EmptyTestEventListener@testing@@UEAAXAEBVUnitTest@2@@Z</DECORATED>
    <FUNCLINE>1105</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1106</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'testing::EmptyTestEventListener::OnTestCaseStart' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>testing::EmptyTestEventListener::OnTestCaseStart</FUNCTION>
    <DECORATED>?OnTestCaseStart@EmptyTestEventListener@testing@@UEAAXAEBVTestCase@2@@Z</DECORATED>
    <FUNCLINE>1106</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1106</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::EmptyTestEventListener::OnTestCaseStart' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::EmptyTestEventListener::OnTestCaseStart</FUNCTION>
    <DECORATED>?OnTestCaseStart@EmptyTestEventListener@testing@@UEAAXAEBVTestCase@2@@Z</DECORATED>
    <FUNCLINE>1106</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1107</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'testing::EmptyTestEventListener::OnTestStart' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>testing::EmptyTestEventListener::OnTestStart</FUNCTION>
    <DECORATED>?OnTestStart@EmptyTestEventListener@testing@@UEAAXAEBVTestInfo@2@@Z</DECORATED>
    <FUNCLINE>1107</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1107</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::EmptyTestEventListener::OnTestStart' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::EmptyTestEventListener::OnTestStart</FUNCTION>
    <DECORATED>?OnTestStart@EmptyTestEventListener@testing@@UEAAXAEBVTestInfo@2@@Z</DECORATED>
    <FUNCLINE>1107</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1108</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'testing::EmptyTestEventListener::OnTestPartResult' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>testing::EmptyTestEventListener::OnTestPartResult</FUNCTION>
    <DECORATED>?OnTestPartResult@EmptyTestEventListener@testing@@UEAAXAEBVTestPartResult@2@@Z</DECORATED>
    <FUNCLINE>1108</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1108</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::EmptyTestEventListener::OnTestPartResult' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::EmptyTestEventListener::OnTestPartResult</FUNCTION>
    <DECORATED>?OnTestPartResult@EmptyTestEventListener@testing@@UEAAXAEBVTestPartResult@2@@Z</DECORATED>
    <FUNCLINE>1108</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1109</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'testing::EmptyTestEventListener::OnTestEnd' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>testing::EmptyTestEventListener::OnTestEnd</FUNCTION>
    <DECORATED>?OnTestEnd@EmptyTestEventListener@testing@@UEAAXAEBVTestInfo@2@@Z</DECORATED>
    <FUNCLINE>1109</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1109</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::EmptyTestEventListener::OnTestEnd' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::EmptyTestEventListener::OnTestEnd</FUNCTION>
    <DECORATED>?OnTestEnd@EmptyTestEventListener@testing@@UEAAXAEBVTestInfo@2@@Z</DECORATED>
    <FUNCLINE>1109</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1110</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'testing::EmptyTestEventListener::OnTestCaseEnd' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>testing::EmptyTestEventListener::OnTestCaseEnd</FUNCTION>
    <DECORATED>?OnTestCaseEnd@EmptyTestEventListener@testing@@UEAAXAEBVTestCase@2@@Z</DECORATED>
    <FUNCLINE>1110</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1110</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::EmptyTestEventListener::OnTestCaseEnd' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::EmptyTestEventListener::OnTestCaseEnd</FUNCTION>
    <DECORATED>?OnTestCaseEnd@EmptyTestEventListener@testing@@UEAAXAEBVTestCase@2@@Z</DECORATED>
    <FUNCLINE>1110</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1111</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'testing::EmptyTestEventListener::OnEnvironmentsTearDownStart' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>testing::EmptyTestEventListener::OnEnvironmentsTearDownStart</FUNCTION>
    <DECORATED>?OnEnvironmentsTearDownStart@EmptyTestEventListener@testing@@UEAAXAEBVUnitTest@2@@Z</DECORATED>
    <FUNCLINE>1111</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1111</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::EmptyTestEventListener::OnEnvironmentsTearDownStart' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::EmptyTestEventListener::OnEnvironmentsTearDownStart</FUNCTION>
    <DECORATED>?OnEnvironmentsTearDownStart@EmptyTestEventListener@testing@@UEAAXAEBVUnitTest@2@@Z</DECORATED>
    <FUNCLINE>1111</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1112</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'testing::EmptyTestEventListener::OnEnvironmentsTearDownEnd' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>testing::EmptyTestEventListener::OnEnvironmentsTearDownEnd</FUNCTION>
    <DECORATED>?OnEnvironmentsTearDownEnd@EmptyTestEventListener@testing@@UEAAXAEBVUnitTest@2@@Z</DECORATED>
    <FUNCLINE>1112</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1112</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::EmptyTestEventListener::OnEnvironmentsTearDownEnd' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::EmptyTestEventListener::OnEnvironmentsTearDownEnd</FUNCTION>
    <DECORATED>?OnEnvironmentsTearDownEnd@EmptyTestEventListener@testing@@UEAAXAEBVUnitTest@2@@Z</DECORATED>
    <FUNCLINE>1112</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1113</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'testing::EmptyTestEventListener::OnTestIterationEnd' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>testing::EmptyTestEventListener::OnTestIterationEnd</FUNCTION>
    <DECORATED>?OnTestIterationEnd@EmptyTestEventListener@testing@@UEAAXAEBVUnitTest@2@H@Z</DECORATED>
    <FUNCLINE>1113</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1113</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::EmptyTestEventListener::OnTestIterationEnd' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::EmptyTestEventListener::OnTestIterationEnd</FUNCTION>
    <DECORATED>?OnTestIterationEnd@EmptyTestEventListener@testing@@UEAAXAEBVUnitTest@2@H@Z</DECORATED>
    <FUNCLINE>1113</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1115</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'testing::EmptyTestEventListener::OnTestProgramEnd' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>testing::EmptyTestEventListener::OnTestProgramEnd</FUNCTION>
    <DECORATED>?OnTestProgramEnd@EmptyTestEventListener@testing@@UEAAXAEBVUnitTest@2@@Z</DECORATED>
    <FUNCLINE>1115</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1115</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::EmptyTestEventListener::OnTestProgramEnd' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::EmptyTestEventListener::OnTestProgramEnd</FUNCTION>
    <DECORATED>?OnTestProgramEnd@EmptyTestEventListener@testing@@UEAAXAEBVUnitTest@2@@Z</DECORATED>
    <FUNCLINE>1115</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1139</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestEventListeners::default_result_printer' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestEventListeners::default_result_printer</FUNCTION>
    <DECORATED>?default_result_printer@TestEventListeners@testing@@QEBAPEAVTestEventListener@2@XZ</DECORATED>
    <FUNCLINE>1139</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1150</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::TestEventListeners::default_xml_generator' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::TestEventListeners::default_xml_generator</FUNCTION>
    <DECORATED>?default_xml_generator@TestEventListeners@testing@@QEBAPEAVTestEventListener@2@XZ</DECORATED>
    <FUNCLINE>1150</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1340</LINE>
      <COLUMN>26</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::UnitTest::impl' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::UnitTest::impl</FUNCTION>
    <DECORATED>?impl@UnitTest@testing@@AEAAPEAVUnitTestImpl@internal@2@XZ</DECORATED>
    <FUNCLINE>1340</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest.h</FILENAME>
      <LINE>1341</LINE>
      <COLUMN>32</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::UnitTest::impl' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::UnitTest::impl</FUNCTION>
    <DECORATED>?impl@UnitTest@testing@@AEBAPEBVUnitTestImpl@internal@2@XZ</DECORATED>
    <FUNCLINE>1341</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>1205</LINE>
      <COLUMN>5</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::scoped_ptr&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; const &gt;::get' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::scoped_ptr&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; const &gt;::get</FUNCTION>
    <DECORATED>?get@?$scoped_ptr@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@internal@testing@@QEBAPEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ</DECORATED>
    <FUNCLINE>1205</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>1204</LINE>
      <COLUMN>5</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::scoped_ptr&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; const &gt;::operator-&gt;' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::scoped_ptr&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; const &gt;::-&gt;</FUNCTION>
    <DECORATED>??C?$scoped_ptr@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@internal@testing@@QEBAPEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ</DECORATED>
    <FUNCLINE>1204</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>1201</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26432</DEFECTCODE>
    <DESCRIPTION>If you define or delete any default operation in the type 'class testing::internal::scoped_ptr&lt;class std::basic_string&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt; &gt;', define or delete them all (c.21).</DESCRIPTION>
    <FUNCTION>testing::internal::scoped_ptr&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; &gt;::{dtor}</FUNCTION>
    <DECORATED>??1?$scoped_ptr@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@internal@testing@@QEAA@XZ</DECORATED>
    <FUNCLINE>1201</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>1201</LINE>
      <COLUMN>23</COLUMN>
    </SFA>
    <DEFECTCODE>26447</DEFECTCODE>
    <DESCRIPTION>The function is declared 'noexcept' but calls function 'reset()' which may throw exceptions (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::scoped_ptr&lt;std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; &gt;::{dtor}</FUNCTION>
    <DECORATED>??1?$scoped_ptr@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@internal@testing@@QEAA@XZ</DECORATED>
    <FUNCLINE>1201</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-linked_ptr.h</FILENAME>
      <LINE>153</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26432</DEFECTCODE>
    <DESCRIPTION>If you define or delete any default operation in the type 'class testing::internal::linked_ptr&lt;class testing::internal::ParamGeneratorInterface&lt;bool&gt; const &gt;', define or delete them all (c.21).</DESCRIPTION>
    <FUNCTION>testing::internal::linked_ptr&lt;testing::internal::ParamGeneratorInterface&lt;bool&gt; const &gt;::{dtor}</FUNCTION>
    <DECORATED>??1?$linked_ptr@$$CBV?$ParamGeneratorInterface@_N@internal@testing@@@internal@testing@@QEAA@XZ</DECORATED>
    <FUNCLINE>153</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-linked_ptr.h</FILENAME>
      <LINE>153</LINE>
      <COLUMN>24</COLUMN>
    </SFA>
    <DEFECTCODE>26447</DEFECTCODE>
    <DESCRIPTION>The function is declared 'noexcept' but calls function 'depart()' which may throw exceptions (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::linked_ptr&lt;testing::internal::ParamGeneratorInterface&lt;bool&gt; const &gt;::{dtor}</FUNCTION>
    <DECORATED>??1?$linked_ptr@$$CBV?$ParamGeneratorInterface@_N@internal@testing@@@internal@testing@@QEAA@XZ</DECORATED>
    <FUNCLINE>153</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>1203</LINE>
      <COLUMN>5</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::scoped_ptr&lt;std::basic_stringstream&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; &gt;::operator*' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::scoped_ptr&lt;std::basic_stringstream&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; &gt;::*</FUNCTION>
    <DECORATED>??D?$scoped_ptr@V?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@internal@testing@@QEBAAEAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ</DECORATED>
    <FUNCLINE>1203</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-param-util.h</FILENAME>
      <LINE>166</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26432</DEFECTCODE>
    <DESCRIPTION>If you define or delete any default operation in the type 'class testing::internal::ParamGeneratorInterface&lt;bool&gt;', define or delete them all (c.21).</DESCRIPTION>
    <FUNCTION>testing::internal::ParamGeneratorInterface&lt;bool&gt;::{dtor}</FUNCTION>
    <DECORATED>??1?$ParamGeneratorInterface@_N@internal@testing@@UEAA@XZ</DECORATED>
    <FUNCLINE>166</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>1476</LINE>
      <COLUMN>0</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::ImplicitCast_&lt;char const * __ptr64&gt;' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::ImplicitCast_</FUNCTION>
    <DECORATED>??$ImplicitCast_@PEBD@internal@testing@@YAPEBDPEBD@Z</DECORATED>
    <FUNCLINE>1476</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-param-util-generated.h</FILENAME>
      <LINE>99</LINE>
      <COLUMN>23</COLUMN>
    </SFA>
    <DEFECTCODE>26472</DEFECTCODE>
    <DESCRIPTION>Don't use a static_cast for arithmetic conversions. Use brace initialization, gsl::narrow_cast or gsl::narrow (type.1).</DESCRIPTION>
    <FUNCTION>testing::internal::ValueArray2&lt;bool,bool&gt;::operator class testing::internal::ParamGenerator&lt;bool&gt;</FUNCTION>
    <DECORATED>??$?B_N@?$ValueArray2@_N_N@internal@testing@@QEBA?AV?$ParamGenerator@_N@12@XZ</DECORATED>
    <FUNCLINE>98</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-param-util-generated.h</FILENAME>
      <LINE>99</LINE>
      <COLUMN>44</COLUMN>
    </SFA>
    <DEFECTCODE>26472</DEFECTCODE>
    <DESCRIPTION>Don't use a static_cast for arithmetic conversions. Use brace initialization, gsl::narrow_cast or gsl::narrow (type.1).</DESCRIPTION>
    <FUNCTION>testing::internal::ValueArray2&lt;bool,bool&gt;::operator class testing::internal::ParamGenerator&lt;bool&gt;</FUNCTION>
    <DECORATED>??$?B_N@?$ValueArray2@_N_N@internal@testing@@QEBA?AV?$ParamGenerator@_N@12@XZ</DECORATED>
    <FUNCLINE>98</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-param-util-generated.h</FILENAME>
      <LINE>95</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::ValueArray2&lt;bool,bool&gt;::ValueArray2&lt;bool,bool&gt;' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::ValueArray2&lt;bool,bool&gt;::{ctor}</FUNCTION>
    <DECORATED>??0?$ValueArray2@_N_N@internal@testing@@QEAA@_N0@Z</DECORATED>
    <FUNCLINE>95</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest-printers.h</FILENAME>
      <LINE>449</LINE>
      <COLUMN>0</COLUMN>
    </SFA>
    <DEFECTCODE>26429</DEFECTCODE>
    <DESCRIPTION>Symbol 'os' is never tested for nullness, it can be marked as not_null (f.23).</DESCRIPTION>
    <FUNCTION>testing::internal::DefaultPrintTo</FUNCTION>
    <DECORATED>??$DefaultPrintTo@$$CBX@internal@testing@@YAXU?$WrapPrinterType@$00@01@PEBXPEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z</DECORATED>
    <FUNCLINE>449</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest-param-test.h</FILENAME>
      <LINE>313</LINE>
      <COLUMN>9</COLUMN>
    </SFA>
    <DEFECTCODE>26481</DEFECTCODE>
    <DESCRIPTION>Don't use pointer arithmetic. Use span instead (bounds.1).</DESCRIPTION>
    <FUNCTION>testing::ValuesIn</FUNCTION>
    <DECORATED>??$ValuesIn@_N$01@testing@@YA?AV?$ParamGenerator@_N@internal@0@AEAY01$$CB_N@Z</DECORATED>
    <FUNCLINE>312</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\</FILEPATH>
      <FILENAME>gtest-param-test.h</FILENAME>
      <LINE>308</LINE>
      <COLUMN>61</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION>testing::ValuesIn</FUNCTION>
    <DECORATED>??$ValuesIn@PEB_N@testing@@YA?AV?$ParamGenerator@_N@internal@0@PEB_N0@Z</DECORATED>
    <FUNCLINE>302</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-param-util.h</FILENAME>
      <LINE>299</LINE>
      <COLUMN>23</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION>testing::internal::ValuesInIteratorRangeGenerator&lt;bool&gt;::End</FUNCTION>
    <DECORATED>?End@?$ValuesInIteratorRangeGenerator@_N@internal@testing@@UEBAPEAV?$ParamIteratorInterface@_N@23@XZ</DECORATED>
    <FUNCLINE>298</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-param-util.h</FILENAME>
      <LINE>298</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::ValuesInIteratorRangeGenerator&lt;bool&gt;::End' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>testing::internal::ValuesInIteratorRangeGenerator&lt;bool&gt;::End</FUNCTION>
    <DECORATED>?End@?$ValuesInIteratorRangeGenerator@_N@internal@testing@@UEBAPEAV?$ParamIteratorInterface@_N@23@XZ</DECORATED>
    <FUNCLINE>298</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-param-util.h</FILENAME>
      <LINE>296</LINE>
      <COLUMN>23</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION>testing::internal::ValuesInIteratorRangeGenerator&lt;bool&gt;::Begin</FUNCTION>
    <DECORATED>?Begin@?$ValuesInIteratorRangeGenerator@_N@internal@testing@@UEBAPEAV?$ParamIteratorInterface@_N@23@XZ</DECORATED>
    <FUNCLINE>295</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-param-util.h</FILENAME>
      <LINE>295</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::ValuesInIteratorRangeGenerator&lt;bool&gt;::Begin' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>testing::internal::ValuesInIteratorRangeGenerator&lt;bool&gt;::Begin</FUNCTION>
    <DECORATED>?Begin@?$ValuesInIteratorRangeGenerator@_N@internal@testing@@UEBAPEAV?$ParamIteratorInterface@_N@23@XZ</DECORATED>
    <FUNCLINE>295</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-param-util.h</FILENAME>
      <LINE>293</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26443</DEFECTCODE>
    <DESCRIPTION>Overriding destructor should not use explicit 'override' or 'virtual' specifiers (c.128).</DESCRIPTION>
    <FUNCTION>testing::internal::ValuesInIteratorRangeGenerator&lt;bool&gt;::{dtor}</FUNCTION>
    <DECORATED>??1?$ValuesInIteratorRangeGenerator@_N@internal@testing@@UEAA@XZ</DECORATED>
    <FUNCLINE>293</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-param-util.h</FILENAME>
      <LINE>293</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26432</DEFECTCODE>
    <DESCRIPTION>If you define or delete any default operation in the type 'class testing::internal::ValuesInIteratorRangeGenerator&lt;bool&gt;', define or delete them all (c.21).</DESCRIPTION>
    <FUNCTION>testing::internal::ValuesInIteratorRangeGenerator&lt;bool&gt;::{dtor}</FUNCTION>
    <DECORATED>??1?$ValuesInIteratorRangeGenerator@_N@internal@testing@@UEAA@XZ</DECORATED>
    <FUNCLINE>293</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-param-util.h</FILENAME>
      <LINE>337</LINE>
      <COLUMN>6</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>testing::internal::ValuesInIteratorRangeGenerator&lt;bool&gt;::Iterator::Equals</FUNCTION>
    <DECORATED>?Equals@Iterator@?$ValuesInIteratorRangeGenerator@_N@internal@testing@@UEBA_NAEBV?$ParamIteratorInterface@_N@34@@Z</DECORATED>
    <FUNCLINE>334</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-param-util.h</FILENAME>
      <LINE>334</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::ValuesInIteratorRangeGenerator&lt;bool&gt;::Iterator::Equals' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>testing::internal::ValuesInIteratorRangeGenerator&lt;bool&gt;::Iterator::Equals</FUNCTION>
    <DECORATED>?Equals@Iterator@?$ValuesInIteratorRangeGenerator@_N@internal@testing@@UEBA_NAEBV?$ParamIteratorInterface@_N@34@@Z</DECORATED>
    <FUNCLINE>334</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-param-util.h</FILENAME>
      <LINE>337</LINE>
      <COLUMN>6</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>testing::internal::ValuesInIteratorRangeGenerator&lt;bool&gt;::Iterator::Equals</FUNCTION>
    <DECORATED>?Equals@Iterator@?$ValuesInIteratorRangeGenerator@_N@internal@testing@@UEBA_NAEBV?$ParamIteratorInterface@_N@34@@Z</DECORATED>
    <FUNCLINE>334</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-param-util.h</FILENAME>
      <LINE>331</LINE>
      <COLUMN>26</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION>testing::internal::ValuesInIteratorRangeGenerator&lt;bool&gt;::Iterator::Current</FUNCTION>
    <DECORATED>?Current@Iterator@?$ValuesInIteratorRangeGenerator@_N@internal@testing@@UEBAPEB_NXZ</DECORATED>
    <FUNCLINE>329</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-param-util.h</FILENAME>
      <LINE>329</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::ValuesInIteratorRangeGenerator&lt;bool&gt;::Iterator::Current' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>testing::internal::ValuesInIteratorRangeGenerator&lt;bool&gt;::Iterator::Current</FUNCTION>
    <DECORATED>?Current@Iterator@?$ValuesInIteratorRangeGenerator@_N@internal@testing@@UEBAPEB_NXZ</DECORATED>
    <FUNCLINE>329</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-param-util.h</FILENAME>
      <LINE>320</LINE>
      <COLUMN>25</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION>testing::internal::ValuesInIteratorRangeGenerator&lt;bool&gt;::Iterator::Clone</FUNCTION>
    <DECORATED>?Clone@Iterator@?$ValuesInIteratorRangeGenerator@_N@internal@testing@@UEBAPEAV?$ParamIteratorInterface@_N@34@XZ</DECORATED>
    <FUNCLINE>319</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-param-util.h</FILENAME>
      <LINE>319</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::ValuesInIteratorRangeGenerator&lt;bool&gt;::Iterator::Clone' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>testing::internal::ValuesInIteratorRangeGenerator&lt;bool&gt;::Iterator::Clone</FUNCTION>
    <DECORATED>?Clone@Iterator@?$ValuesInIteratorRangeGenerator@_N@internal@testing@@UEBAPEAV?$ParamIteratorInterface@_N@34@XZ</DECORATED>
    <FUNCLINE>319</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-param-util.h</FILENAME>
      <LINE>315</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::ValuesInIteratorRangeGenerator&lt;bool&gt;::Iterator::Advance' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>testing::internal::ValuesInIteratorRangeGenerator&lt;bool&gt;::Iterator::Advance</FUNCTION>
    <DECORATED>?Advance@Iterator@?$ValuesInIteratorRangeGenerator@_N@internal@testing@@UEAAXXZ</DECORATED>
    <FUNCLINE>315</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-param-util.h</FILENAME>
      <LINE>312</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26433</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::ValuesInIteratorRangeGenerator&lt;bool&gt;::Iterator::BaseGenerator' should be marked with 'override' (c.128).</DESCRIPTION>
    <FUNCTION>testing::internal::ValuesInIteratorRangeGenerator&lt;bool&gt;::Iterator::BaseGenerator</FUNCTION>
    <DECORATED>?BaseGenerator@Iterator@?$ValuesInIteratorRangeGenerator@_N@internal@testing@@UEBAPEBV?$ParamGeneratorInterface@_N@34@XZ</DECORATED>
    <FUNCLINE>312</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-param-util.h</FILENAME>
      <LINE>312</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::ValuesInIteratorRangeGenerator&lt;bool&gt;::Iterator::BaseGenerator' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::ValuesInIteratorRangeGenerator&lt;bool&gt;::Iterator::BaseGenerator</FUNCTION>
    <DECORATED>?BaseGenerator@Iterator@?$ValuesInIteratorRangeGenerator@_N@internal@testing@@UEBAPEBV?$ParamGeneratorInterface@_N@34@XZ</DECORATED>
    <FUNCLINE>312</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-param-util.h</FILENAME>
      <LINE>310</LINE>
      <COLUMN>13</COLUMN>
    </SFA>
    <DEFECTCODE>26443</DEFECTCODE>
    <DESCRIPTION>Overriding destructor should not use explicit 'override' or 'virtual' specifiers (c.128).</DESCRIPTION>
    <FUNCTION>testing::internal::ValuesInIteratorRangeGenerator&lt;bool&gt;::Iterator::{dtor}</FUNCTION>
    <DECORATED>??1Iterator@?$ValuesInIteratorRangeGenerator@_N@internal@testing@@UEAA@XZ</DECORATED>
    <FUNCLINE>310</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-param-util.h</FILENAME>
      <LINE>310</LINE>
      <COLUMN>13</COLUMN>
    </SFA>
    <DEFECTCODE>26432</DEFECTCODE>
    <DESCRIPTION>If you define or delete any default operation in the type 'class testing::internal::ValuesInIteratorRangeGenerator&lt;bool&gt;::Iterator', define or delete them all (c.21).</DESCRIPTION>
    <FUNCTION>testing::internal::ValuesInIteratorRangeGenerator&lt;bool&gt;::Iterator::{dtor}</FUNCTION>
    <DECORATED>??1Iterator@?$ValuesInIteratorRangeGenerator@_N@internal@testing@@UEAA@XZ</DECORATED>
    <FUNCLINE>310</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-param-util.h</FILENAME>
      <LINE>91</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26432</DEFECTCODE>
    <DESCRIPTION>If you define or delete any default operation in the type 'class testing::internal::ParamIteratorInterface&lt;bool&gt;', define or delete them all (c.21).</DESCRIPTION>
    <FUNCTION>testing::internal::ParamIteratorInterface&lt;bool&gt;::{dtor}</FUNCTION>
    <DECORATED>??1?$ParamIteratorInterface@_N@internal@testing@@UEAA@XZ</DECORATED>
    <FUNCLINE>91</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-linked_ptr.h</FILENAME>
      <LINE>152</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::linked_ptr&lt;testing::internal::ParamGeneratorInterface&lt;bool&gt; const &gt;::{ctor}</FUNCTION>
    <DECORATED>??0?$linked_ptr@$$CBV?$ParamGeneratorInterface@_N@internal@testing@@@internal@testing@@QEAA@PEBV?$ParamGeneratorInterface@_N@12@@Z</DECORATED>
    <FUNCLINE>152</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>1216</LINE>
      <COLUMN>8</COLUMN>
    </SFA>
    <DEFECTCODE>26401</DEFECTCODE>
    <DESCRIPTION>Do not delete a raw pointer that is not an owner&lt;T&gt; (i.11).</DESCRIPTION>
    <FUNCTION>testing::internal::scoped_ptr&lt;bool const &gt;::reset</FUNCTION>
    <DECORATED>?reset@?$scoped_ptr@$$CB_N@internal@testing@@QEAAXPEB_N@Z</DECORATED>
    <FUNCLINE>1213</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>1216</LINE>
      <COLUMN>8</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION>testing::internal::scoped_ptr&lt;bool const &gt;::reset</FUNCTION>
    <DECORATED>?reset@?$scoped_ptr@$$CB_N@internal@testing@@QEAAXPEB_N@Z</DECORATED>
    <FUNCLINE>1213</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>1527</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>testing::internal::CheckedDowncastToActualType</FUNCTION>
    <DECORATED>??$CheckedDowncastToActualType@$$CBVIterator@?$ValuesInIteratorRangeGenerator@_N@internal@testing@@$$CBV?$ParamIteratorInterface@_N@34@@internal@testing@@YAPEBVIterator@?$ValuesInIteratorRangeGenerator@_N@01@PEBV?$ParamIteratorInterface@_N@01@@Z</DECORATED>
    <FUNCLINE>1525</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>1527</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26818</DEFECTCODE>
    <DESCRIPTION>Switch statement does not cover all cases. Consider adding a 'default' label (es.79).</DESCRIPTION>
    <FUNCTION>testing::internal::CheckedDowncastToActualType</FUNCTION>
    <DECORATED>??$CheckedDowncastToActualType@$$CBVIterator@?$ValuesInIteratorRangeGenerator@_N@internal@testing@@$$CBV?$ParamIteratorInterface@_N@34@@internal@testing@@YAPEBVIterator@?$ValuesInIteratorRangeGenerator@_N@01@PEBV?$ParamIteratorInterface@_N@01@@Z</DECORATED>
    <FUNCLINE>1525</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>G:\Work\Neural Net\NeuralNet\GTests\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-static.1.8.1.3\build\native\include\gtest\internal\</FILEPATH>
      <FILENAME>gtest-port.h</FILENAME>
      <LINE>1525</LINE>
      <COLUMN>0</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'testing::internal::CheckedDowncastToActualType&lt;testing::internal::ValuesInIteratorRangeGenerator&lt;bool&gt;::Iterator const ,testing::internal::ParamIteratorInterface&lt;bool&gt; const &gt;' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>testing::internal::CheckedDowncastToActualType</FUNCTION>
    <DECORATED>??$CheckedDowncastToActualType@$$CBVIterator@?$ValuesInIteratorRangeGenerator@_N@internal@testing@@$$CBV?$ParamIteratorInterface@_N@34@@internal@testing@@YAPEBVIterator@?$ValuesInIteratorRangeGenerator@_N@01@PEBV?$ParamIteratorInterface@_N@01@@Z</DECORATED>
    <FUNCLINE>1525</FUNCLINE>
    <PATH></PATH>
  </DEFECT></DEFECTS>